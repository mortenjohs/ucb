theme(legend.position="top",
legend.title=element_blank()) +
ylab("Threats/Attacks") +
xlab("")
ggplot(peer, aes(x=Year, y=Number, color=Agency)) + geom_line(size=1) + geom_point(size=3) +
scale_color_manual(values=c("#a6611a", "green3")) +
theme_minimal(base_size = 16, base_family = "Proxima Nova Semibold") +
theme(legend.position="top",
legend.title=element_blank()) +
ylab("Threats/Attacks") +
xlab("")
setwd("/Volumes/MyBook2/data2016")
names_planes <- c("aircraft_id","latitude","longitude","track","altitude","speed","squawk","radar_id","type","registration","last_update","origin","destination","flight","onground","vspeed","callsign","reserved","flight_id","adshex","squawk_hex","timestamp")
file_list <- list.files("csv_days")
file_list
file_list <- list.files("csv_days")[228:237]
file_list
airlines <- read_tsv("airlines.tsv") %>%
filter(IATA != "") %>%
mutate(IATA = substring(IATA,1,2))
View(airlines)
library(rvest)
url <- "https://en.wikipedia.org/wiki/List_of_airline_codes"
airlines <- url %>%
html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[1]') %>%
html_table()
airlines <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[1]') %>%
html_table()
airlines <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[1]') %>%
html_table()[[1]]
airlines <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[1]') %>%
html_table()
airlines
airlines <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[2]') %>%
html_table()
airlines <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[2]') %>%
html_table(fill=TRUE)
airlines
airlines <- airlines[[1]]
View(airlines)
airlines <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[2]') %>%
html_table(fill=TRUE)
airlines <- airlines[[1]][1:6]
View(airlines)
View(airlines)
View(airlines)
names(airlines) <- c("ICAO","IATA","callsign2","country","comments")
View(airlines)
url <- "https://en.wikipedia.org/wiki/List_of_airline_codes"
airlines <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[2]') %>%
html_table(fill=TRUE)
airlines <- airlines[[1]][1:6]
View(airlines)
names(airlines) <- c("ICAO","IATA","airline","callsign2","country","comments")
View(airlines)
install.packages("rworldmap")
library(rworldmap)
world <- countriesCoarse()
world <- data(countriesCoarse)
worldmap
mapCountryData()
world <- mapCountryData()
world
world <- data(countriesCoarse)
library(rgdal)
coords_ny <- matrix(c(78.46801, 19.53407,
78.46801, 19.74557,
78.83157, 19.74557,
78.83157, 19.53407,
78.46801, 19.53407),
ncol = 2, byrow = TRUE)
poly_ny <- Polygon(coords_ny)
box_ny = SpatialPolygons(list(Polygons(list(poly_ny), ID = "a")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(box_ny)
airports <- readOGR("ne_50m_airports", "ne_50m_airports")
airports$proj4string
detach(rgdal)
detach("rgdal")
library(dplyr)
library(readr)
library(rvest)
library(rgdal)
install.packages("rgdal")
library(rgdal)
detach("package:rgdal", unload=TRUE)
library(rgdal)
detach("package:rgdal", unload=TRUE)
library(rgdal)
load("/Volumes/MyBook2/data2016/planes_filtering_invest.RData")
library(dplyr)
library(readr)
library(rvest)
library(rgdal)
library(rgeos)
plot(nyc_buffer)
plot(nyc_depart, add=TRUE)
plot(nyc_depart)
plot(nyc_buffer, add=TRUE)
plot(nyc_buffer, add=TRUE, color=red)
plot(nyc_buffer, add=TRUE, color="red")
plot(nyc_buffer, add=TRUE, col="red")
plot(nyc_buffer, col="red", add=TRUE)
plot(nyc_depart, col="red")
plot(nyc_buffer, col="red")
plot(nyc_buffer, col="blue", add=TRUE)
plot(nyc_depart, col="red")
plot(nyc_buffer, col="blue", add=TRUE)
writeOGR(nyc_depart, "day", "day", driver="ESRI Shapefile" )
nyc_depart@data$flight_id <- as.character(nyc_depart@data$flight_id)
writeOGR(nyc_depart, "day", "day", driver="ESRI Shapefile" )
writeOGR(nyc_depart, "day", "day", driver="ESRI Shapefile" )
writeOGR(nyc_buffer, "nyc", "nyc", driver="ESRI Shapefile" )
plot(nyc_depart, col="red", axes=TRUE)
str(nyc_depart)
airports <- readOGR("ne_50m_airports", "ne_50m_airports")
airports@proj4string
day <- SpatialPointsDataFrame(coords = xy, data = day, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
plot(nyc_buffer, col="blue", axes=TRUE)
airports <- spTransform(airports, CRS( "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs" ) )
airports@proj4string
nas_buffer <- spTransform(nas_buffer, CRS( "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0" ) )
a
nas_buffer@proj4string
nyc_buffer <- spTransform(nyc_buffer, CRS( "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0" ) )
nyc_buffer@proj4string
nyc_planes <- raster::intersect(nyc_buffer,day)
day <- as.data.frame(day)
day <- SpatialPointsDataFrame(coords = xy, data = day, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
nyc_depart <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_from)),]
nyc_arrive <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_to)|grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$real_to)),]
nas_depart <- day [which(grepl("NAS", day@data$schd_from)),]
nas_arrive <- day [which(grepl("NAS", day@data$schd_to)|grepl("NAS", day@data$real_to)),]
save.image("/Volumes/MyBook2/data2016/planes_filtering_invest.RData")
nyc_planes <- raster::intersect(day,nyc_buffer)
plot(nyc_buffer, axes=TRUE)
plot(nyc_planes, col="red", add=TRUE)
plot(nyc_planes, axes=TRUE)
nyc_planes <- gIntersection(day, nyc_buffer, byid = TRUE, drop_lower_td = TRUE)
nyc_planes <- day[nyc_buffer, ]
nyc_planes <- day[nyc_buffer, ]
plot(nyc_planes, col="red", add=TRUE)
nyc_buffer@proj4string
nas_buffer@proj4string
n <- 0
n <- 0
for (file in file_list) {
day <- read_csv(paste0("csv_days/",file)) %>%
mutate(flight_id=as.hexmode(flight_id),
timestamp=as.character(as.POSIXct(snapshot_id, origin="1970-01-01", tz="UTC")),
vspeed="",
onground="")
print(paste0("processing file ",n," of ",length(file_list)))
day <- as.data.frame(day)
xy <- day[,c(16,15)]
day <- SpatialPointsDataFrame(coords = xy, data = day, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
nyc_depart <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_from)),]
nyc_arrive <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_to)|grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$real_to)),]
nas_depart <- day [which(grepl("NAS", day@data$schd_from)),]
nas_arrive <- day [which(grepl("NAS", day@data$schd_to)|grepl("NAS", day@data$real_to)),]
nyc_planes <- day[nyc_buffer, ]
nas_planes <- day[nas_buffer, ]
nyc_depart <- as.data.frame(nyc_depart)
nyc_arrive <- as.data.frame(nyc_arrive)
nas_depart <- as.data.frame(nas_depart)
nas_arrive <- as.data.frame(nas_arrive)
nyc_planes <- as.data.frame(nyc_planes)
nas_planes <- as.data.frame(nas_planes)
write_csv(nyc_depart, paste0("output/",nyc_depart,".csv"), na="", append = TRUE)
write_csv(nyc_arrive, paste0("output/",nyc_arrive,".csv"), na="", append = TRUE)
write_csv(nas_depart, paste0("output/",nas_depart,".csv"), na="", append = TRUE)
write_csv(nas_arrive, paste0("output/",nas_arrive,".csv"), na="", append = TRUE)
write_csv(nyc_planes, paste0("output/",nyc_planes,".csv"), na="", append = TRUE)
write_csv(nas_planes, paste0("output/",nas_planes,".csv"), na="", append = TRUE)
}
write_csv(nyc_depart, paste0("output/",nyc_depart,".csv"), na="", append = TRUE)
write_csv(nyc_depart, "output/nyc_depart.csv", na="", append = TRUE)
nyc_onground <- bind_rows(nyc_depart,nyc_arrive)
nyc_onground <- nyc_onground[nyc_buffer, ]
nyc_onground <- nyc_onground[nyc_buffer, ]
nyc_depart <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_from)),]
nyc_arrive <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_to)|grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$real_to)),]
nas_depart <- day [which(grepl("NAS", day@data$schd_from)),]
nas_arrive <- day [which(grepl("NAS", day@data$schd_to)|grepl("NAS", day@data$real_to)),]
nyc_planes <- nyc_depart[nyc_buffer, ]
nyc_arrive <- nyc_arrive[nyc_buffer, ]
nyc_depart <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_from)),]
nyc_depart2 <- nyc_depart[nyc_buffer, ]
nyc_arrive <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_to)|grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$real_to)),]
nyc_arrive2 <- nyc_arrive[nyc_buffer, ]
nas_depart <- day [which(grepl("NAS", day@data$schd_from)),]
nas_arrive <- day [which(grepl("NAS", day@data$schd_to)|grepl("NAS", day@data$real_to)),]
nyc_planes <- day[nyc_buffer, ]
nas_planes <- day[nas_buffer, ]
nyc_depart <- as.data.frame(nyc_depart)
nyc_arrive <- as.data.frame(nyc_arrive)
nas_depart <- as.data.frame(nas_depart)
nas_arrive <- as.data.frame(nas_arrive)
nyc_planes <- as.data.frame(nyc_planes)
nas_planes <- as.data.frame(nas_planes)
nyc_depart2 <- as.data.frame(nyc_depart2)
nyc_arrive2 <- as.data.frame(nyc_arrive2)
nyc_onground <- bind_rows(nyc_depart2,nyc_arrive2)
nyc_planes <- anti_join(nyc_planes,nyc_onground)
n <- 0
for (file in file_list) {
day <- read_csv(paste0("csv_days/",file)) %>%
mutate(flight_id=as.hexmode(flight_id),
timestamp=as.character(as.POSIXct(snapshot_id, origin="1970-01-01", tz="UTC")),
vspeed="",
onground="")
print(paste0("processing file ",n," of ",length(file_list)))
day <- as.data.frame(day)
xy <- day[,c(16,15)]
day <- SpatialPointsDataFrame(coords = xy, data = day, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
nyc_depart <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_from)),]
nyc_depart2 <- nyc_depart[nyc_buffer, ]
nyc_arrive <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_to)|grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$real_to)),]
nyc_arrive2 <- nyc_arrive[nyc_buffer, ]
nas_depart <- day [which(grepl("NAS", day@data$schd_from)),]
nas_arrive <- day [which(grepl("NAS", day@data$schd_to)|grepl("NAS", day@data$real_to)),]
nyc_planes <- day[nyc_buffer, ]
nas_planes <- day[nas_buffer, ]
nyc_depart <- as.data.frame(nyc_depart)
nyc_arrive <- as.data.frame(nyc_arrive)
nas_depart <- as.data.frame(nas_depart)
nas_arrive <- as.data.frame(nas_arrive)
nyc_planes <- as.data.frame(nyc_planes)
nas_planes <- as.data.frame(nas_planes)
nyc_depart2 <- as.data.frame(nyc_depart2)
nyc_arrive2 <- as.data.frame(nyc_arrive2)
nyc_onground <- bind_rows(nyc_depart2,nyc_arrive2)
nyc_planes <- anti_join(nyc_planes,nyc_onground)
write_csv(nyc_depart, "output/nyc_depart.csv", na="", append = TRUE)
write_csv(nyc_arrive, "output/nyc_arrive.csv", na="", append = TRUE)
write_csv(nas_depart, "output/nas_depart.csv", na="", append = TRUE)
write_csv(nas_arrive, "output/nas_arrive.csv", na="", append = TRUE)
write_csv(nyc_planes, "output/nyc_planes.csv", na="", append = TRUE)
write_csv(nas_planes, "output/nas_planes.csv", na="", append = TRUE)
}
n <- 1
for (file in file_list) {
day <- read_csv(paste0("csv_days/",file)) %>%
mutate(flight_id=as.hexmode(flight_id),
timestamp=as.character(as.POSIXct(snapshot_id, origin="1970-01-01", tz="UTC")),
vspeed="",
onground="")
print(paste0("processing file ",n," of ",length(file_list)))
day <- as.data.frame(day)
xy <- day[,c(16,15)]
day <- SpatialPointsDataFrame(coords = xy, data = day, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
nyc_depart <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_from)),]
nyc_arrive <- day [which(grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$schd_to)|grepl("JFK|EWR|LGA|ISP|SWF|TTN|HPN|TEB|HWV|FOK", day@data$real_to)),]
nas_depart <- day [which(grepl("NAS", day@data$schd_from)),]
nas_arrive <- day [which(grepl("NAS", day@data$schd_to)|grepl("NAS", day@data$real_to)),]
nyc_planes <- day[nyc_buffer, ]
nas_planes <- day[nas_buffer, ]
nyc_depart <- as.data.frame(nyc_depart)
nyc_arrive <- as.data.frame(nyc_arrive)
nas_depart <- as.data.frame(nas_depart)
nas_arrive <- as.data.frame(nas_arrive)
nyc_planes <- as.data.frame(nyc_planes)
nas_planes <- as.data.frame(nas_planes)
write_csv(nyc_depart, "output/nyc_depart.csv", na="", append = TRUE)
write_csv(nyc_arrive, "output/nyc_arrive.csv", na="", append = TRUE)
write_csv(nas_depart, "output/nas_depart.csv", na="", append = TRUE)
write_csv(nas_arrive, "output/nas_arrive.csv", na="", append = TRUE)
write_csv(nyc_planes, "output/nyc_planes.csv", na="", append = TRUE)
write_csv(nas_planes, "output/nas_planes.csv", na="", append = TRUE)
}
save.image("/Volumes/MyBook2/data2016/planes_filtering_invest.RData")
save.image("/Volumes/MyBook2/data2016/planes_filtering_invest.RData")
setwd("/Volumes/MyBook2/data2016")
library(WDI)
library(dplyr)
library(readr)
library(stringr)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "SP.DYN.CBRT.IN","SH.DYN.NMRT")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2014, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates") %>%
select(1,9,2:8,10,14)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
# write to csv
write_csv(indicators, "nations.csv", na="")
setwd("~/SpiderOak Hive/raw-data/week3")
write_csv(indicators, "nations.csv", na="")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates") %>%
select(1,9,2:8,10,14)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
View(indicators)
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2016, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates") %>%
select(1,9,2:8,10,14)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
View(indicators)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "SP.DYN.CBRT.IN","SH.DYN.NMRT")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates") %>%
select(1,9,2:8,10,14)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
# write to csv
write_csv(indicators, "nations.csv", na="")
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "SP.DYN.CBRT.IN","SH.DYN.NMRT")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates") %>%
select(1,9,2:8,10,14)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
# write to csv
write_csv(indicators, "nations.csv", na="")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates")
# load required packages
library(WDI)
library(dplyr)
library(readr)
library(stringr)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "SP.DYN.CBRT.IN","SH.DYN.NMRT")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates") %>%
select(1,9,2:8,10,14)
indicators <- indicators %>%
select(-life_expect)
View(indicators)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
write_csv(indicators, "nations.csv", na="")
co2 <- WDI(indicator="EN.ATM.CO2E.PC", country="all", start=1990, end=2014, extra=F, cache=NULL)
View(co2)
co2 <- WDI(indicator="EN.ATM.CO2E.PC", country="all", start=1990, end=2014, extra=T, cache=NULL) %>%
filter(income != "Aggregates")
View(co2)
co2 <- WDI(indicator="EN.ATM.CO2E.PC", country="all", start=1990, end=2014, extra=T, cache=NULL) %>%
filter(income != "Aggregates") %>%
select(1:5)
write_csv(co2,"co2.csv", na="")
# load required packages
library(WDI)
library(dplyr)
library(readr)
library(stringr)
# create list of indicators to be imported
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "SP.DYN.CBRT.IN","SH.DYN.NMRT")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates") %>%
select(1,9,2:8,10,14)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
nations2015 <- indicators %>%
filter(year==2015)
write_csv(nations2015, "nations_2015.csv", na="")
write.csv(nations2015, "nations_2015.csv", na="")
library(ggplot2)
ggplot(nations2015, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
# load required package
library(scales)
ggplot(nations2015, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
install.packages("plotly", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
bubble <- ggplot(nations2015, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
library(plotly)
bubble_plotly <- ggplotly(bubble)
bubble_plotly
bubble <- ggplot(nations2015, aes(x = gdp_percap, y = life_expect, text = paste0("Country: ",country))) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
library(plotly)
bubble_plotly <- ggplotly(bubble)
bubble_plotly
# Get this figure: fig <- get_figure("paldhous", 302)
# Get this figure's data: data <- get_figure("paldhous", 302)$data
# Add data to this figure: p <- add_trace(p, x=c(4, 5), y=c(4, 5), kwargs=list(filename="Plot 302", fileopt="extend"))
# Get y data of first trace: y1 <- get_figure("paldhous", 302)$data[[1]]$y
# Get figure documentation: https://plot.ly/r/get-requests/
# Add data documentation: https://plot.ly/r/file-options/
# You can reproduce this figure in R with the following code!
# Learn about API authentication here: https://plot.ly/r/getting-started
# Find your api_key here: https://plot.ly/settings/api
library(plotly)
trace1 <- list(
x = c("2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014"),
y = c("Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alameda", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Alpine", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Amador", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Butte", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Calaveras", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Colusa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Contra Costa", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "Del Norte", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "El Dorado", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Fresno", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Glenn", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Humboldt", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Imperial", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Inyo", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kern", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Kings", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lake", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Lassen", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Los Angeles", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Madera", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Marin", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mariposa", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Mendocino", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Merced", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Modoc", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Mono", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Monterey", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Napa", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Nevada", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Orange", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Placer", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Plumas", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Riverside", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "Sacramento", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Benito", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Bernardino", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Diego", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Francisco", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Joaquin", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Luis Obispo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "San Mateo", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Barbara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Clara", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Santa Cruz", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Shasta", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Sierra", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Siskiyou", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Solano", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Sonoma", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Stanislaus", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Sutter", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Tehama", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Trinity", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tulare", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Tuolumne", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Ventura", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yolo", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba", "Yuba"),
z = c("2074", "1676", "1650", "1585", "1269", "1530", "1541", "1632", "1587", "1733", "1959", "2448", "2192", "2347", "3", "2", "2", "3", "1", "1", "0", "1", "1", "0", "0", "3", "2", "", "17", "10", "17", "17", "14", "15", "20", "22", "21", "17", "37", "27", "53", "21", "232", "182", "166", "182", "177", "200", "195", "204", "261", "287", "293", "308", "372", "343", "31", "37", "36", "58", "57", "65", "86", "63", "97", "97", "77", "87", "105", "75", "21", "23", "23", "13", "13", "9", "20", "8", "3", "12", "8", "9", "6", "5", "792", "590", "700", "595", "602", "694", "841", "890", "955", "1093", "843", "912", "886", "902", "10", "13", "25", "26", "19", "36", "11", "21", "29", "28", "48", "39", "43", "33", "215", "188", "153", "320", "266", "305", "226", "252", "234", "378", "319", "314", "392", "207", "688", "618", "542", "500", "589", "681", "698", "950", "920", "770", "900", "934", "1034", "853", "24", "16", "9", "17", "9", "12", "5", "14", "14", "18", "16", "9", "14", "7", "204", "135", "189", "174", "220", "218", "217", "331", "305", "339", "331", "351", "399", "354", "143", "140", "177", "150", "91", "117", "138", "171", "216", "233", "167", "156", "147", "200", "12", "4", "6", "7", "8", "16", "5", "9", "6", "7", "4", "6", "8", "6", "763", "898", "740", "758", "886", "946", "1034", "1155", "1138", "1490", "1058", "959", "1185", "1038", "114", "97", "66", "76", "87", "79", "72", "75", "84", "97", "119", "66", "70", "85", "142", "106", "76", "82", "100", "91", "96", "62", "110", "72", "93", "98", "109", "74", "47", "82", "84", "62", "61", "52", "39", "55", "50", "37", "48", "56", "47", "56", "16545", "13590", "13274", "12071", "11816", "11586", "12385", "11896", "12536", "13127", "14049", "16198", "15338", "18151", "199", "145", "119", "138", "156", "195", "147", "107", "120", "128", "166", "169", "157", "155", "295", "241", "328", "322", "459", "389", "465", "503", "536", "558", "723", "604", "676", "516", "34", "11", "11", "10", "17", "24", "35", "26", "21", "77", "19", "23", "29", "32", "140", "151", "157", "127", "134", "150", "118", "141", "144", "163", "158", "203", "274", "210", "199", "171", "177", "150", "234", "182", "237", "204", "159", "359", "236", "247", "221", "250", "27", "12", "25", "17", "6", "8", "11", "8", "11", "6", "31", "9", "14", "8", "9", "16", "22", "13", "11", "1", "4", "2", "3", "9", "2", "9", "10", "15", "307", "340", "292", "247", "293", "227", "274", "381", "392", "420", "418", "476", "726", "800", "141", "99", "85", "77", "76", "95", "69", "110", "71", "107", "114", "101", "122", "119", "187", "211", "232", "198", "217", "221", "176", "163", "179", "197", "205", "266", "226", "227", "3957", "3010", "3048", "3039", "3044", "3166", "3636", "4061", "4216", "4488", "4320", "4441", "4792", "4145", "442", "423", "435", "440", "442", "516", "528", "549", "605", "590", "707", "812", "748", "743", "19", "16", "13", "29", "9", "41", "15", "28", "30", "17", "17", "27", "28", "21", "1942", "1476", "1347", "1256", "1316", "1415", "1321", "1666", "1802", "1982", "2044", "2086", "2225", "1922", "2366", "2015", "2064", "1815", "2023", "1926", "1727", "2279", "2807", "2907", "3249", "3036", "2773", "2455", "56", "53", "45", "48", "35", "38", "34", "49", "31", "45", "31", "31", "31", "28", "1635", "1430", "1325", "1202", "1508", "1366", "1481", "1800", "1701", "1938", "1814", "1870", "2106", "2075", "2857", "2363", "2479", "2256", "2305", "2271", "2583", "2655", "2983", "3399", "3504", "3961", "4278", "3310", "711", "612", "496", "627", "566", "594", "532", "575", "593", "711", "790", "722", "777", "885", "632", "582", "485", "427", "449", "581", "482", "519", "546", "505", "352", "377", "464", "509", "249", "205", "166", "158", "195", "213", "258", "272", "295", "343", "366", "347", "406", "361", "939", "712", "609", "617", "572", "542", "863", "948", "1017", "1023", "817", "779", "910", "599", "587", "447", "412", "406", "367", "329", "381", "358", "408", "398", "359", "467", "493", "359", "2342", "1774", "1514", "1351", "1219", "1149", "1366", "1367", "1561", "1605", "1431", "1607", "1938", "1636", "392", "405", "372", "380", "466", "409", "500", "409", "559", "587", "576", "616", "548", "580", "239", "235", "175", "224", "182", "254", "337", "303", "324", "376", "388", "391", "513", "332", "4", "2", "2", "1", "2", "1", "1", "2", "5", "3", "1", "0", "0", "0", "64", "55", "52", "72", "62", "96", "63", "93", "64", "80", "80", "74", "81", "70", "387", "329", "284", "322", "381", "309", "260", "209", "276", "275", "257", "290", "287", "289", "597", "458", "517", "599", "616", "633", "645", "721", "664", "627", "607", "671", "677", "630", "493", "459", "388", "394", "417", "360", "427", "421", "451", "478", "493", "501", "582", "577", "55", "84", "64", "39", "77", "67", "98", "153", "73", "175", "160", "197", "169", "173", "72", "71", "66", "51", "76", "59", "52", "63", "41", "82", "56", "60", "64", "50", "8", "2", "17", "16", "19", "14", "14", "20", "5", "21", "14", "18", "24", "14", "455", "345", "315", "303", "241", "231", "283", "271", "298", "300", "339", "438", "299", "319", "139", "65", "86", "43", "69", "82", "109", "114", "125", "107", "125", "109", "123", "92", "1355", "1326", "1070", "1152", "1249", "915", "949", "1220", "1231", "1335", "1331", "1291", "1321", "1192", "183", "193", "137", "112", "84", "106", "157", "209", "142", "269", "187", "205", "217", "180", "206", "164", "138", "84", "129", "110", "114", "96", "117", "154", "124", "154", "98", "49"),
autocolorscale = FALSE,
colorscale = list(c(0, "rgb(46, 4, 149)"),list(0.35, "rgb(142, 12, 163)"),list(0.5, "rgb(205, 73, 117)"),list(0.6, "rgb(243, 134, 71)"),list(0.7, "rgb(250, 186, 32)"),list(1, "rgb(249, 216, 36)")),
connectgaps = TRUE,
name = "Incomplete",
reversescale = FALSE,
showscale = TRUE,
type = "heatmap",
uid = "2b0173",
xgap = 1,
xsrc = "paldhous:303:ad4952",
xtype = "array",
ygap = 1,
ysrc = "paldhous:303:dc415f",
ytype = "array",
zauto = FALSE,
zmax = 5000,
zmin = 0,
zsrc = "paldhous:303:74fd3d"
)
data <- list(trace1)
layout <- list(
autosize = TRUE,
hovermode = "closest",
xaxis = list(
autorange = TRUE,
range = c(2000.5, 2014.5),
title = "year",
type = "linear"
),
yaxis = list(
autorange = TRUE,
range = c(57.5, -0.5),
title = "participants",
type = "category"
)
)
p <- plot_ly()
p <- add_trace(p, x=trace1$x, y=trace1$y, z=trace1$z, autocolorscale=trace1$autocolorscale, colorscale=trace1$colorscale, connectgaps=trace1$connectgaps, name=trace1$name, reversescale=trace1$reversescale, showscale=trace1$showscale, type=trace1$type, uid=trace1$uid, xgap=trace1$xgap, xsrc=trace1$xsrc, xtype=trace1$xtype, ygap=trace1$ygap, ysrc=trace1$ysrc, ytype=trace1$ytype, zauto=trace1$zauto, zmax=trace1$zmax, zmin=trace1$zmin, zsrc=trace1$zsrc)
p <- layout(p, autosize=layout$autosize, hovermode=layout$hovermode, xaxis=layout$xaxis, yaxis=layout$yaxis)
p
p <- plot_ly()
p <- add_trace(p, x=trace1$x, y=trace1$y, z=trace1$z, autocolorscale=trace1$autocolorscale, colorscale=trace1$colorscale, connectgaps=trace1$connectgaps, name=trace1$name, reversescale=trace1$reversescale, showscale=trace1$showscale, type=trace1$type, uid=trace1$uid, xgap=trace1$xgap, xsrc=trace1$xsrc, xtype=trace1$xtype, ygap=trace1$ygap, ysrc=trace1$ysrc, ytype=trace1$ytype, zauto=trace1$zauto, zmax=trace1$zmax, zmin=trace1$zmin, zsrc=trace1$zsrc)
p <- layout(p, autosize=layout$autosize, hovermode=layout$hovermode, xaxis=layout$xaxis, yaxis=layout$yaxis)
p
