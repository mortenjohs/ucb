# load required libraries
library(tidycensus)
library(rgdal)
library(readr)
library(dplyr)
library(tidyr)
library(tigris)
library(kwgeo)
library(googledrive)
library(utils)
options(tigris_use_cache = TRUE)
# set census api key
census_api_key("f6811bb29b8f3f4de930ececf654c6d0ebe6c7be", install = TRUE)
readRenviron("~/.Renviron")
# load required libraries
library(tidycensus)
library(rgdal)
library(readr)
library(dplyr)
library(tidyr)
library(tigris)
library(kwgeo)
# set carto account details
cartodb_id <- "peter-aldhous"
cartodb_api <- "4e0413e60d653cdd010fbfd6a3f233e50099bbd1"
fl_z <- zctas(state = "Florida", cb = FALSE, year = 2010)
r2cartodb(fl_z, "fl_zip", cartodb_id, cartodb_api)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SH.DYN.MORT", "SP.DYN.TFRT.IN")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN) %>%
filter(income != "Aggregates")
# load required packages
library(WDI)
library(dplyr)
library(readr)
library(stringr)
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN) %>%
filter(income != "Aggregates")
View(indicators)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
install.packages(c("boot", "Matrix", "mgcv"))
install.packages(c("tidy", "verse"))
install.packages("tidyverse")
RStudio.Version()
RStudio.Version()
load("/Users/peteraldhous/SpiderOak Hive/state_of_the_union/sou.RData")
install.packages("quanteda", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("quanteda", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::install_github("quanteda/quanteda")
devtools::install_github("tylermorganwall/rayshader")
library(readr)
library(dplyr)
library(rtweet)
library(stringr)
library(lubridate)
curr_members <- read_csv("http://theunitedstates.io/congress-legislators/legislators-current.csv")
View(curr_members)
# get members' twitter timelines
members_tweets <- data_frame()
x <- 1
for (m in curr_members$twitter) {
print(paste0(m," ",x," of ",length(curr_members$twitter)))
try(tmp <- get_timeline(m, n = 3200))
try(members_tweets <- bind_rows(members_tweets,tmp))
rm(tmp_list,tmp)
Sys.sleep(60)
x <- x+1
# save data every 20 members, in case of crashes
if (x%%20==0) save.image("twitter_congress_update.RData")
}
devtools::install_github('thomasp85/gganimate')
install.packages("devtools")
devtools::install_github('thomasp85/gganimate')
library(gganimate)
install.packages("plotly")
library(readr)
library(ggplot2)
library(gganimate)
library(scales)
library(dplyr)
library(tidyr)
setwd("~/Dropbox/ucb/2018/dataviz/raw-data/week14")
# load data
nations <- read_csv("nations.csv")
# filter for 2015 data only
nations2016 <- nations %>%
filter(year == 2016)
ggplot(nations2016, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
nations_plot <- ggplot(nations, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 16, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4)) +
# gganimate code
ggtitle("{frame_time}") +
transition_time(year) +
ease_aes("linear") +
enter_fade() + # explain the alternatives
exit_fade()
animate(nations_plot)
# load
warming <- read_csv("warming.csv")
glimpse(warming)
# draw chart
warming_plot <- ggplot(warming, aes(x = year, y = value)) +
geom_line(colour="black") +
geom_point(shape = 21, colour = "black", aes(fill = value), size=5, stroke=1) +
scale_x_continuous(limits = c(1880,2017)) +
scale_y_continuous(limits = c(-0.5,1)) +
scale_fill_distiller(palette = "RdYlBu", limits = c(-1,1), guide = FALSE) +
xlab("") +
ylab("Difference from 1900-2000 (ºC)") +
theme_minimal(base_size = 16, base_family = "Georgia") +
# gganimate code
transition_reveal(id = 1, along = year) +
transition_time(year) +
shadow_mark()
warming_plot
devtools::install_github("thomasp85/transformr")
warming_plot <- ggplot(warming, aes(x = year, y = value)) +
geom_line(colour="black") +
geom_point(shape = 21, colour = "black", aes(fill = value), size=5, stroke=1) +
scale_x_continuous(limits = c(1880,2017)) +
scale_y_continuous(limits = c(-0.5,1)) +
scale_fill_distiller(palette = "RdYlBu", limits = c(-1,1), guide = FALSE) +
xlab("") +
ylab("Difference from 1900-2000 (ºC)") +
theme_minimal(base_size = 16, base_family = "Georgia") +
# gganimate code
transition_reveal(id = 1, along = year) +
transition_time(year) +
shadow_mark()
warming_anim <- animate(warming_plot, fps = 10, width = 750, height = 450)
warming_plot <- ggplot(warming, aes(x = year, y = value)) +
geom_line(colour="black") +
geom_point(shape = 21, colour = "black", aes(fill = value), size=5, stroke=1) +
scale_x_continuous(limits = c(1880,2017)) +
scale_y_continuous(limits = c(-0.5,1)) +
scale_fill_distiller(palette = "RdYlBu", limits = c(-1,1), guide = FALSE) +
xlab("") +
ylab("Difference from 1900-2000 (ºC)") +
theme_minimal(base_size = 16, base_family = "Georgia") +
# gganimate code
transition_reveal(id = 1, along = year)
animate(warming_plot, fps = 10, width = 750, height = 450)
setwd("~/Dropbox/ucb/2018/dataviz/raw-data/week14")
# load required packages
library(plotly)
library(readr)
library(dplyr)
setwd("~/Dropbox/ucb/2018/dataviz/raw-data/week13")
food_stamps <- read_csv("food_stamps2.csv")
# dot-and-line chart
food_stamps_chart <- ggplot(food_stamps, aes(x = year, y = participants)) +
xlab("Year") +
ylab("Participants (millions)") +
theme_minimal(base_size = 14, base_family = "Georgia") +
geom_point() +
geom_line()
plot(food_stamps_chart)
# make interactive version
food_stamps_interactive <- ggplotly(food_stamps_chart)
# load data
food_stamps <- read_csv("food_stamps2.csv")
# load data
food_stamps <- read_csv("food_stamps.csv")
# dot-and-line chart
food_stamps_chart <- ggplot(food_stamps, aes(x = year, y = participants)) +
xlab("Year") +
ylab("Participants (millions)") +
theme_minimal(base_size = 14, base_family = "Georgia") +
geom_point() +
geom_line()
plot(food_stamps_chart)
# make interactive version
food_stamps_interactive <- ggplotly(food_stamps_chart)
print(food_stamps_interactive)
food_stamps_interactive <- ggplotly(food_stamps_chart) %>%
config(displayModeBar = FALSE) %>%
layout(hoverlabel = list(bgcolor = "white"))
print(food_stamps_interactive)
# load data
disease_democ <- read_csv("disease_democ.csv")
disease_democ_chart <- ggplot(disease_democ, aes(x = infect_rate,
y = democ_score,
text = paste0("<b>Country: </b>", country,"<br>",
"<b>Infectious disease prevalence: </b>", infect_rate,"<br>",
"<b>Democratization: </b>", democ_score),
group = 1)) +
xlab("Infectious disease prevalence score") +
ylab("Democratization score") +
theme_minimal(base_size = 14, base_family = "Georgia") +
geom_smooth(method = lm, se = FALSE, color = "black", linetype = "dotdash", size = 0.3) +
geom_point(aes(color=income_group), size = 3, alpha = 0.5) +
scale_color_brewer(palette = "Set1",
name="Income group",
breaks=c("High income: OECD","High income: non-OECD","Upper middle income","Lower middle income","Low income"))
plot(disease_democ_chart)
# make interactive version
disease_democ_interactive <- ggplotly(disease_democ_chart, tooltip="text") %>%
config(displayModeBar = FALSE) %>%
layout(hoverlabel = list(bgcolor = "white"))
print(disease_democ_interactive)
disease_democ_interactive <- ggplotly(disease_democ_chart, tooltip="text") %>%
config(displayModeBar = FALSE) %>%
layout(hoverlabel = list(bgcolor = "white",
font = list(family = "Georgia")))
print(disease_democ_interactive)
food_stamps_interactive <- ggplotly(food_stamps_chart, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(hoverlabel = list(bgcolor = "white",
font = list(family = "Georgia")))
print(food_stamps_interactive)
# customize the tooltips
food_stamps_chart <- ggplot(food_stamps, aes(x = year,
y = participants,
text = paste0("<b>Year: </b>", year,"<br>",
"<b>Participants: </b>", participants," million<br>",
"<b>Costs: </b> $", costs, " billion"),
group = 1)) +
xlab("Year") +
ylab("Participants (millions)") +
theme_minimal(base_size = 14, base_family = "Georgia") +
geom_point() +
geom_line()
food_stamps_interactive <- ggplotly(food_stamps_chart, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(hoverlabel = list(bgcolor = "white",
font = list(family = "Georgia")))
print(food_stamps_interactive)
oreilly <- get_timelines("billoreilly", n = 3200)
# load required packages
library(rtweet)
oreilly <- get_timelines("billoreilly", n = 3200)
View(oreilly)
# Set default timezone for session to UTC
Sys.setenv(TZ = "UTC")
View(oreilly)
oreilly <- get_timelines("billoreilly", n = 3200) %>%
mutate(tweet_date = as.Date(created_at)
setwd("~/Dropbox/berkeley/2018dataviz/students/lilia-walsh/data/user_tweets")
Sys.setenv(TZ = "UTC")
oreilly <- get_timelines("billoreilly", n = 3200) %>%
mutate(tweet_date = as.Date(created_at))
write_as_csv(oreilly, "orielly.csv", na="")
ansari <- get_timelines("azisansari", n = 3200) %>%
mutate(tweet_date = as.Date(created_at))
write_as_csv(ansari, "ansari.csv", na="")
rose <- get_timelines("charlierose", n = 3200) %>%
mutate(tweet_date = as.Date(created_at))
write_as_csv(rose, "rose.csv", na="")
Sys.setenv(TZ = "UTC")
oreilly <- get_timelines("billoreilly", n = 3200) %>%
mutate(tweet_date = as.Date(created_at))
write_as_csv(oreilly, "orielly.csv", na="")
ansari <- get_timelines("azisansari", n = 3200) %>%
mutate(tweet_date = as.Date(created_at))
write_as_csv(ansari, "ansari.csv", na="")
rose <- get_timelines("charlierose", n = 3200) %>%
mutate(tweet_date = as.Date(created_at))
write_as_csv(rose, "rose.csv", na="")
View(rose)
ansari <- get_timelines("azizansari", n = 3200) %>%
mutate(tweet_date = as.Date(created_at))
write_as_csv(ansari, "ansari.csv", na="")
View(ansari)
