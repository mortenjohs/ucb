tolower(substring(s, 2)),
collapse=" ")}, USE.NAMES=F)
}
# some initial text cleaning
olympics$Games <- gsub("-"," ",olympics$Games)
olympics$Result <- gsub("-",":",olympics$Result)
olympics$Games <- gsub("/ stockholm","",olympics$Games)
olympics$Participant <- gsub("kostas","Kostas",olympics$Participant)
olympics$Participant <- gsub("NANA",NA,olympics$Participant)
# create new columns and clean existing
olympics_cleaned <- olympics %>%
mutate(Medal=str_replace_all(word(Result,1),"[\r\n]" , ""),
Result=word(Result,-1),
Gender=toproper(word(Event,-1)),
Event=toproper(word(Event,1,-2)),
Year=word(Games,-1),
Games=toproper(Games),
Location=word(Games,1,-2),
Country=word(Participant,-1),
Year=as.integer(Year),
Participant=str_trim(toproper(word(Participant,1,-2))))
# separate into track, field, and combined events
olympics_field <- olympics_cleaned %>%
filter(grepl("Jump|Throw|Put",Event) & !grepl("thlon",Event))
olympics_combined <- olympics_cleaned %>%
filter(grepl("thlon",Event))
olympics_track <- anti_join(olympics_cleaned,(bind_rows(olympics_field,olympics_combined)))
# data type conversions for Results
olympics_field <- olympics_field %>%
mutate(Result=as.numeric(Result))
olympics_combined <- olympics_combined %>%
mutate(Result=as.numeric(Result))
View(olympics_track)
View(olympics_track)
olympics$Participant <- gsub("NANA","",olympics$Participant)
olympics_cleaned <- olympics %>%
mutate(Medal=str_replace_all(word(Result,1),"[\r\n]" , ""),
Result=word(Result,-1),
Gender=toproper(word(Event,-1)),
Event=toproper(word(Event,1,-2)),
Year=word(Games,-1),
Games=toproper(Games),
Location=word(Games,1,-2),
Country=word(Participant,-1),
Year=as.integer(Year),
Participant=str_trim(toproper(word(Participant,1,-2))))
# separate into track, field, and combined events
olympics_field <- olympics_cleaned %>%
filter(grepl("Jump|Throw|Put",Event) & !grepl("thlon",Event))
olympics_combined <- olympics_cleaned %>%
filter(grepl("thlon",Event))
olympics_track <- anti_join(olympics_cleaned,(bind_rows(olympics_field,olympics_combined)))
# data type conversions for Results
olympics_field <- olympics_field %>%
mutate(Result=as.numeric(Result))
olympics_combined <- olympics_combined %>%
mutate(Result=as.numeric(Result))
View(olympics_track)
str(olympics_track)[4]
str(olympics_track)[4]
# load required packages
library(rvest)
library(dplyr)
library(stringr)
library(lubridate)
library(ggplot2)
# list of games
games <- c("athens-1896",
"paris-1900",
"st-louis-1904",
"london-1908",
"stockholm-1912",
"antwerp-1920",
"paris-1924",
"amsterdam-1928",
"los-angeles-1932",
"berlin-1936",
"london-1948",
"helsinki-1952",
"melbourne-/-stockholm-1956",
"rome-1960",
"tokyo-1964",
"mexico-1968",
"munich-1972",
"montreal-1976",
"moscow-1980",
"los-angeles-1984",
"seoul-1988",
"barcelona-1992",
"atlanta-1996",
"sydney-2000",
"athens-2004",
"beijing-2008",
"london-2012")
# data frame to receive scraped data
olympics <- data_frame()
######################
# scrape athletics results (gold, silver, bronze) for track & field events
for (game in games) {
html <- read_html(paste0("https://www.olympic.org/",game,"/athletics"))
results <- html_table(html_nodes(html, "table"), trim = T, fill = T, header = T)
events <- html_nodes(html, "h2") %>%
html_text(trim = T) %>%
tail(-1)
n <- 0
for (result in results) {
n <- n+1
tmp <- result %>%
mutate(Event=events[n],
Games=game)
print(paste0(game," ",events[n]))
olympics <- bind_rows(olympics,tmp)
}
}
#####################
# clean data
# function to convert text string into proper case
toproper <- function(x) {
sapply(x, function(strn)
{ s <- strsplit(strn, "\\s")[[1]]
paste0(toupper(substring(s, 1,1)),
tolower(substring(s, 2)),
collapse=" ")}, USE.NAMES=F)
}
# some initial text cleaning
olympics$Games <- gsub("-"," ",olympics$Games)
olympics$Result <- gsub("-",":",olympics$Result)
olympics$Games <- gsub("/ stockholm","",olympics$Games)
olympics$Participant <- gsub("kostas","Kostas",olympics$Participant)
olympics$Participant <- gsub("NANA","",olympics$Participant)
# create new columns and clean existing
olympics_cleaned <- olympics %>%
mutate(Medal=str_replace_all(word(Result,1),"[\r\n]" , ""),
Result=word(Result,-1),
Gender=toproper(word(Event,-1)),
Event=toproper(word(Event,1,-2)),
Year=word(Games,-1),
Games=toproper(Games),
Location=word(Games,1,-2),
Country=word(Participant,-1),
Year=as.integer(Year),
Participant=str_trim(toproper(word(Participant,1,-2))))
# separate into track, field, and combined events
olympics_field <- olympics_cleaned %>%
filter(grepl("Jump|Throw|Put",Event) & !grepl("thlon",Event))
olympics_combined <- olympics_cleaned %>%
filter(grepl("thlon",Event))
olympics_track <- anti_join(olympics_cleaned,(bind_rows(olympics_field,olympics_combined)))
# data type conversions for Results
olympics_field <- olympics_field %>%
mutate(Result=as.numeric(Result))
olympics_combined <- olympics_combined %>%
mutate(Result=as.numeric(Result))
str(olympics_track)[4]
View(olympics_track)
View(olympics)
if (olympics_track$Participant=="NANA") olympics_track$Participant <- olympics_track$Country
if (olympics_track$Participant=="NANA") {
olympics_track$Participant <- olympics_track$Country
}
if (olympics_track$Participant=="NANA") olympics_track$Participant <- olympics_track$Country
olympics$Participant <- gsub("NANA",olympics_track$Country,olympics$Participant)
olympics_track$Participant <- gsub("NANA",olympics_track$Country,olympics$Participant)
View(olympics_track)
if (olympics_track$Participant=="NANA")  olympics_track$Participant <- olympics_track$Country
olympics_track <- olympics_track %>%
mutate(Participant=str_replace_all("NANA",Country))
olympics_track <- olympics_track %>%
mutate(Participant=str_replace_all("NANA",olympics_track$Country))
library(readr)
library(dplyr)
setwd("~/Dropbox/berkeley/intro_data/tims")
files <- list.files("oakland")
oakland <- data_frame()
for (file in files) {
tmp <- read_csv(file)
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file))
oakland <- bind_rows(oakland,tmp)
}
View(oakland)
for (file in files) {
tmp <- read_csv(paste0("oakland/",file))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file))
oakland <- bind_rows(oakland,tmp)
}
oakland <- data_frame()
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = list(
CHPTYPE = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character())
oakland <- bind_rows(oakland,tmp)
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character())))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character()))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = (
CHPTYPE = col_character())
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = (
CHPTYPE = col_character()))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = CHPTYPE = "c")
oakland <- bind_rows(oakland,tmp)
}
paste0("oakland/",file)
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = (CHPTYPE = "c"))
oakland <- bind_rows(oakland,tmp)
}
tmp <- read.csv(paste0("oakland/",file), col_types = (CHPTYPE = "c"))
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = (
CHPTYPE = "c"
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = "c"
))
oakland <- bind_rows(oakland,tmp)
}
library(readr)
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = "c"
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = "c",
LOCATION = "c"
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_date()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_factor()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_character(),
DATE = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_character(),
DATE = col_date()
))
oakland <- bind_rows(oakland,tmp)
}
2536+2403+2298+2246+1959+2014+2075+2213+2124
setwd("/Volumes/Working/adsb")
# load required packages
library(dplyr)
library(readr)
# Set default timezone for session to UTC
Sys.setenv(TZ = "UTC")
files <- list.files("archive/good")
good_errors <- c()
for (file in files) {
print(file)
good_planes <- read_csv(paste0("archive/good/",file)) %>%
filter(!is.na(acList.Lat)) %>%
select(17,29,8,26,39,27,33,20,21,1,35,19,24)
names(good_planes) <- c("adshex","reg","country","operator","type","postime","squawk","latitude","longitude","altitude","track","interesting","military")
good_planes <- good_planes %>%
filter(country=="United States" | country=="Canada")
unique_planes <- unique(good_planes$adshex)
n=1
for (plane in unique_planes) {
tmp <- good_planes %>%
filter(adshex==plane) %>%
unique() %>%
mutate(timestamp=as.POSIXct(postime/1000, origin="1970-01-01"))
tmp$reg <- gsub("/","-",tmp$reg)
possibleError <- tryCatch({
write_csv(tmp, paste0("indiv_planes_new/",plane,"_",tmp$reg[1],"_",tmp$operator[1],"_",tmp$country[1],".csv"), na="", append = TRUE)
print(paste0(file," ",plane," ",n," of ",length(unique_planes)))
n=n+1
}, warning = function(w) {
}, error = function(e) {
good_errors[[length(good_errors)+1]] <- plane
})
}
}
View(good_planes)
View(tmp)
good_planes <- read_csv("archive/done_good/2016-07-21H00.csv")
good_planes <- read_csv("archive/good/2016-07-21H00.csv")
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv")
problems()
problems(good_planes)
View(problems(good_planes))
good_planes <- read_csv("archive/good/2016-07-21H12.csv")
good_planes <- read_csv("archive/good_done/2016-07-21H12.csv")
View(problems(good_planes))
good_planes <- read_csv("archive/good/2016-07-21H00.csv", col_types = col(
acList.year=col_character()
))
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv", col_types = col(
acList.year=col_character()
))
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv", col_types = col(
acList.year=col_character()
)
)
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv", col_types = cols(
acList.year=col_character()
))
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv", col_types = cols(
acList.Year=col_character()
))
str(good_planes)
library(dplyr)
library(readr)
# Set default timezone for session to UTC
Sys.setenv(TZ = "UTC")
# from good
files <- list.files("archive/good")
good_errors <- c()
for (file in files) {
print(file)
good_planes <- read_csv(paste0("archive/good/",file), col_types = cols(
acList.Year=col_character()
)) %>%
filter(!is.na(acList.Lat)) %>%
select(17,29,8,26,39,27,33,20,21,1,35,19,24)
names(good_planes) <- c("adshex","reg","country","operator","type","postime","squawk","latitude","longitude","altitude","track","interesting","military")
good_planes <- good_planes %>%
filter(country=="United States" | country=="Canada")
unique_planes <- unique(good_planes$adshex)
n=1
for (plane in unique_planes) {
tmp <- good_planes %>%
filter(adshex==plane) %>%
unique() %>%
mutate(timestamp=as.POSIXct(postime/1000, origin="1970-01-01"))
tmp$reg <- gsub("/","-",tmp$reg)
possibleError <- tryCatch({
write_csv(tmp, paste0("indiv_planes_new/",plane,"_",tmp$reg[1],"_",tmp$operator[1],"_",tmp$country[1],".csv"), na="", append = TRUE)
print(paste0(file," ",plane," ",n," of ",length(unique_planes)))
n=n+1
}, warning = function(w) {
}, error = function(e) {
good_errors[[length(good_errors)+1]] <- plane
})
}
}
gdp_pc <- read.csv("~/Dropbox/ucb/2016/dataviz/data/week1/gdp_pc.csv", stringsAsFactors=FALSE)
View(gdp_pc)
library(ggplot2)
ggplot(gdp_pc, aes(x=gdp_percap)) + geom_histogram()
ggplot(gdp_pc, aes(x=gdp_percap)) + geom_histogram(binwidth=2500)
ggplot(gdp_pc, aes(x=gdp_percap)) + geom_histogram(binwidth=5000)
ggplot(gdp_pc, aes(x=gdp_percap)) + geom_histogram(binwidth=2500)
library(WDI)
library(dplyr)
library(WDI)
library(ggplot2)
library(scales)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "SP.DYN.CBRT.IN","SH.DYN.NMRT")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2014) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal=SH.DYN.NMRT, iso_a2=iso2c)
View(indicators)
gdp_pc <- WDI(indicator="NY.GDP.PCAP.PP.CD", country="all", start=2014, end=2014, extra=TRUE)
View(gdp_pc)
library(ggplot2)
library(dplyr)
library(WDI)
gdp_pc <- WDI(indicator="NY.GDP.PCAP.PP.CD", country="all", start=2014, end=2014, extra=TRUE) %>%
filter(!is.na(region) | region != "Aggregates")
View(gdp_pc)
library(ggplot2)
library(dplyr)
library(WDI)
gdp_pc <- WDI(indicator="NY.GDP.PCAP.PP.CD", country="all", start=2014, end=2014, extra=TRUE) %>%
filter(!is.na(region) | region != "Aggregates")
View(gdp_pc)
gdp_pc <- WDI(indicator="NY.GDP.PCAP.PP.CD", country="all", start=2014, end=2014, extra=TRUE) %>%
filter(income != "Aggregates")
View(gdp_pc)
View(gdp_pc)
gdp_pc <- WDI(indicator="NY.GDP.PCAP.PP.CD", country="all", start=2014, end=2014, extra=TRUE) %>%
filter(income != "Aggregates") %>%
select(2,5,3) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD)
View(gdp_pc)
setwd("~/Dropbox/ucb/2016/dataviz/raw-data/week1")
library(ggplot2)
library(dplyr)
library(WDI)
library(readr)
write_csv(gdp_pc, "gdp_pc.csv", na="")
View(indicators)
View(gdp_pc)
library(scales)
ggplot(gdp_pc, aes(x=gdp_percap, y=..count..)) + geom_histogram(binwidth=2500) + ylab("Number of countries") + xlab("GDP per capita (2014)") + scale_x_continuous(labels = dollar)
ggplot(gdp_pc, aes(x=gdp_percap, y=..count..)) +
geom_histogram(binwidth=2500) +
ylab("Number of countries") +
xlab("GDP per capita (2014)") +
scale_x_continuous(labels = dollar)
ggplot(gdp_pc, aes(x=gdp_percap, y=..count..)) +
geom_histogram(binwidth=2500) +
ylab("Number of countries") +
xlab("GDP per capita (2014)") +
scale_x_continuous(labels = dollar, limits = c(0,160000))
ggplot(gdp_pc, aes(x=gdp_percap, y=..count..)) +
geom_histogram(binwidth=2500) +
ylab("Number of countries") +
xlab("GDP per capita (2014)") +
scale_x_continuous(labels = dollar)
ggplot(gdp_pc, aes(x=gdp_percap, y=..count..)) +
geom_histogram(binwidth=2500) +
ylab("Number of countries") +
xlab("GDP per capita (2014)") +
# scale_x_continuous(labels = dollar) +
scale_x_continuous(labels = dollar, limits = c(-2500,160000))
ggplot(gdp_pc, aes(x=gdp_percap, y=..count..)) +
geom_histogram(binwidth=2500) +
ylab("Number of countries") +
xlab("GDP per capita (2014)") +
# scale_x_continuous(labels = dollar) +
scale_x_continuous(labels = dollar, limits = c(-2500,160000))
ggplot(gdp_pc, aes(x=gdp_percap, y=..count..)) +
geom_histogram(binwidth=2500) +
ylab("Number of countries") +
xlab("GDP per capita (2014)") +
# scale_x_continuous(labels = dollar) +
scale_x_continuous(labels = dollar, limits = c(-2500,160000)) +
theme_minimal()
View(gdp_pc)
