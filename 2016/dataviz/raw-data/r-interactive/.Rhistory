storms_n$yAxis(axisLabel=("Number of storms"),
tickFormat = "#! d3.format(',0f') !#")
storms_n$chart(stacked = TRUE)
storms_n
storms_n$chart(showControls = FALSE,
stacked = TRUE)
storms_n
storms_n <- nPlot(count ~ year,
group="type",
data = storms_year,
type = "multiBarChart")
storms_n$yAxis(axisLabel=("Number of storms"),
tickFormat = "#! d3.format(',0f') !#")
storms_n$chart(showControls = FALSE,
stacked = TRUE)
# plot chart
storms_n
storms_h <- hPlot(count ~ year,
group = "type",
data = storms,
type = "column")
stroms_h$plotOptions(column = list(stacking = "normal"))
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h$xAxis(title = list(text = ""))
# storms_h$colors("#e41a1c", "#377eb8", "#4daf4a", "#984ea3")
storms_h$plotOptions(stacked=TRUE)
storms_h <- hPlot(count ~ year,
# group = "type",
data = storms,
type = "column")
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h$xAxis(title = list(text = ""))
# storms_h$colors("#e41a1c", "#377eb8", "#4daf4a", "#984ea3")
storms_h$plotOptions(stacked=TRUE)
storms_h <- hPlot(count ~ year,
group = "type",
data = storms,
type = "column")
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h$xAxis(title = list(text = ""))
storms_h <- hPlot(count ~ year,
categories = "type",
data = storms,
type = "column")
storms_h <- hPlot(count ~ year,
group = "type",
data = storms,
type = "line")
life_expect_h <- hPlot(life_expect ~ year,
group = "country",
data = countries,
type = "line")
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "line")
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "column")
storms_h
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "column")
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h$xAxis(title = list(text = ""))
# storms_h$colors("#e41a1c", "#377eb8", "#4daf4a", "#984ea3")
storms_h$plotOptions(stacked=TRUE)
storms_h
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "column")
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h
storms_h$plotOptions(stacked=TRUE)
storms_h$plotOptions(stacked=TRUE)
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "column")
storms_h
storms_h$plotOptions(stacked=TRUE)
storms_h
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h
storms_year <- storms %>%
filter(year >= 1980) %>%
group_by(year,name) %>%
summarize(max_wind = max(max_wind_mph, na.rm=TRUE)) %>%
mutate(type=ifelse(max_wind >= 74, "Hurricanes", "Storms")) %>%
ungroup() %>%
group_by(year, type) %>%
summarize(count= n())
storms_n <- nPlot(count ~ year,
group="type",
data = storms_year,
type = "multiBarChart")
storms_n$yAxis(axisLabel=("Number of storms"),
tickFormat = "#! d3.format(',0f') !#")
storms_n$chart(showControls = FALSE,
stacked = TRUE)
storms_n
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "column")
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h$xAxis(title = list(text = ""))
storms_h$colors("#e41a1c", "#377eb8")
storms_h
storms_n$save("storms_h.html", cdn = FALSE)
storms_h$save("storms_h.html", cdn = FALSE)
senate_network
senate <- fromJSON("senate-113-2014.json")
str(senate)
nodes <- as.data.frame(senate$nodes)
links <- as.data.frame(senate$links) %>%
filter(percent_agree > 0.67)
colors <- JS("d3.scale.ordinal().range(['#ff0000','#0000ff','#d2691e'])")
senate_network <- forceNetwork(
Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
NodeID = "id",
Group = "party",
opacity = 1,
bounded = TRUE,
linkColour = "#cccccc",
colourScale = colors
)
senate_network
saveWidget(senate_network, "senate.html", selfcontained = TRUE, libdir = NULL,
background = "white")
########################################################
# valeant <- read.csv("http://real-chart.finance.yahoo.com/table.csv?s=VRX") %>%
#   mutate(Ticker="VRX", Date=as.Date(Date))
#
# gsk <- read.csv("http://real-chart.finance.yahoo.com/table.csv?s=GSK") %>%
#   mutate(Ticker="GSK", Date=as.Date(Date))
#
# valeant_gsk <- rbind(valeant, gsk)
#
# drugcos_line <- nPlot(Close ~ Date,
#                           group="Ticker",
#                           data = valeant_gsk,
#                           type = "lineWithFocusChart")
# drugcos_line$yAxis(axisLabel=("Daily closing price($)"))
#
# drugcos_line
#
# drugcos_line$save("drugcos_line.html", cdn = FALSE)
# # load brain_data.csv
# brain <- read.csv("brain_data.csv")
#
# # make column chart with NVD3
# brain_column <- nPlot(value ~ species,
#                    data = brain,
#                    type = "discreteBarChart")
# brain_column$yAxis( tickFormat="#! d3.format(',0f') !#",
#                  axisLabel=("Brain size (g)"))
#
#
# # plot chart
# brain_column
#
# # save chart
# brain_column$save("brain_column.html", cdn = FALSE)
#
# # make bar chart with NVD3
# brain_bar <- nPlot(value ~ species,
#                    data = brain,
#                    type = "multiBarHorizontalChart")
# brain_bar$yAxis( tickFormat="#! d3.format(',0f') !#",
#                  axisLabel=("Brain size (g)"))
# brain_bar$chart(showControls = FALSE)
#
# # plot chart
# brain_bar
#
# # save chart
# brain_bar$save("brain_bar.html", cdn = FALSE)
storms_n <- nPlot(count ~ year,
group="type",
data = storms_year,
type = "multiBarChart")
storms_n$yAxis(axisLabel=("Number of storms"),
tickFormat = "#! d3.format(',0f') !#")
storms_n$chart(showControls = FALSE,
stacked = TRUE)
# plot chart
storms_n
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "column")
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h$xAxis(title = list(text = ""))
# plot chart
storms_h
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "column")
storms_h$set(width = 100%)
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h$xAxis(title = list(text = ""))
gsk <- read.csv("http://real-chart.finance.yahoo.com/table.csv?s=GSK") %>%
mutate(Date=as.Date(Date))  %>%
select(Date, Close) %>%
rename(GSK = Close)
valeant_gsk <- left_join(gsk, valeant, by="Date") %>%
filter(Date >= "2010-01-01")
library(xts)
valeant_gsk <- xts(valeant_gsk, order.by = valeant_gsk$Date)
drug_cos <- dygraph(valeant_gsk) %>%
dyRangeSelector()
drug_cos
# load required libraries
library(devtools)
library(leaflet)
library(dplyr)
library(rgdal)
library(htmlwidgets)
library(RColorBrewer)
library(ggplot2)
library(dygraphs)
library(xts)
library(WDI)
library(networkD3)
library(jsonlite)
library(rCharts)
setwd("~/Dropbox/ucb/2015/dataviz/raw-data/r-interactive")
install_github("rCharts", "ramnathv")
# load required libraries
library(devtools)
library(leaflet)
library(dplyr)
library(rgdal)
library(htmlwidgets)
library(RColorBrewer)
library(ggplot2)
library(dygraphs)
library(xts)
library(WDI)
library(networkD3)
library(jsonlite)
library(rCharts)
setwd("~/Dropbox/ucb/2015/dataviz/raw-data/r-interactive")
install_github("rCharts", "ramnathv")
indic_list <- c("SP.DYN.LE00.IN", "SH.XPD.PCAP.PP.KD", "SL.UEM.TOTL.ZS")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2013) %>%
rename(life_expect=SP.DYN.LE00.IN, health_spend=SH.XPD.PCAP.PP.KD, unemploy_rate=SL.UEM.TOTL.ZS) %>%
mutate(life_expect=round(life_expect, digits=2),unemploy_rate=round(unemploy_rate, digits=2), health_spend=round(health_spend, digits=0))
countries <- filter(indicators, iso2c=="GR"|iso2c=="DE"|iso2c=="EU"|iso2c=="RU")
countries$country <- gsub("Russian Federation", "Russia", countries$country)
countries$country <- gsub("European Union", "EU", countries$country)
life_expect_n <- nPlot(life_expect ~ year,
group="country",
data = countries,
type = "lineChart")
life_expect_n$yAxis(axisLabel=("Life expectancy at birth (years)"))
life_expect_n$chart(color = c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"))
life_expect_n
life_expect_h <- hPlot(life_expect ~ year,
group = "country",
data = countries,
type = "line")
life_expect_h$yAxis(title = list(text = "Life expectancy at birth (years)"))
life_expect_h$xAxis(title = list(text = ""))
life_expect_h$colors("#e41a1c", "#377eb8", "#4daf4a", "#984ea3")
life_expect_h$plotOptions(line=list(marker=list(enabled=FALSE)))
# plot chart
life_expect_h
storms <- read.csv("storms.csv")
storms_year <- storms %>%
filter(year >= 1980) %>%
group_by(year,name) %>%
summarize(max_wind = max(max_wind_mph, na.rm = TRUE)) %>%
mutate(type=ifelse(max_wind >= 74, "Hurricanes", "Storms")) %>%
ungroup() %>%
group_by(year, type) %>%
summarize(count = n())
storms_n <- nPlot(count ~ year,
group="type",
data = storms_year,
type = "multiBarChart")
storms_n$yAxis(axisLabel=("Number of storms"),
tickFormat = "#! d3.format(',0f') !#")
storms_n$chart(showControls = FALSE,
stacked = TRUE)
# plot chart
storms_n
storms_h <- hPlot(count ~ year,
group = "type",
data = storms_year,
type = "column")
storms_h$plotOptions(column = list(stacking = "normal"))
storms_h$yAxis(title = list(text = "Number of storms"))
storms_h$xAxis(title = list(text = ""))
storms_h
valeant <- read.csv("http://real-chart.finance.yahoo.com/table.csv?s=VRX") %>%
mutate(Date=as.Date(Date)) %>%
select(Date, Close) %>%
rename(VRX = Close)
gsk <- read.csv("http://real-chart.finance.yahoo.com/table.csv?s=GSK") %>%
mutate(Date=as.Date(Date))  %>%
select(Date, Close) %>%
rename(GSK = Close)
valeant_gsk <- left_join(gsk, valeant, by="Date") %>%
filter(Date >= "2010-01-01")
valeant_gsk <- xts(valeant_gsk, order.by = valeant_gsk$Date)
drug_cos <- dygraph(valeant_gsk) %>%
dyRangeSelector()
drug_cos
drug_cos <- dygraph(valeant_gsk) %>%
dyOptions(fillGraph = TRUE,
fillAlpha = 0.4) %>%
dyRangeSelector()
drug_cos
map <- leaflet() %>%
setView(lng = -122.2705383, lat = 37.8698807, zoom = 11)
map %>%
addTiles()
map %>%
addProviderTiles("CartoDB.Positron")
seismic_risk <- readOGR("seismic_risk_clip", "seismic_risk_clip")
quakes <- read.csv("http://earthquake.usgs.gov/fdsnws/event/1/query?starttime=1965-01-01T00:00:00&minmagnitude=6&format=csv&latitude=39.828175&longitude=-98.5795&maxradiuskm=6000&orderby=magnitude")
seismic_map <- leaflet(data=seismic_risk)
seismic_map %>%
setView(lng = -98.5795, lat = 39.828175, zoom = 4) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
stroke = FALSE,
fillOpacity = 0.7,
smoothFactor = 0.2,
color = ~colorQuantile("Reds", seismic_risk$ACC_VAL, n = 5)(ACC_VAL)
)
summary(seismic_risk)
breaks <- c(0,19,39,59,79,200)
binpal <- colorBin("Reds", seismic_map$ACC_VAL, breaks)
seismic <- seismic_map %>%
setView(lng = -98.5795, lat = 39.828175, zoom = 4) %>%
addProviderTiles("CartoDB.Positron", group = "CartoDB") %>%
addProviderTiles("Stamen.TonerLite", group = "Toner") %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.7,
smoothFactor = 0.1,
color = ~binpal(ACC_VAL)
) %>%
addCircles(
data=quakes,
radius = sqrt(10^quakes$mag)*50,
weight = 0.2,
color = "#000000",
fillColor ="#ffffff",
opacity = 0.7,
popup = paste0("<p><strong>Magnitude: </strong>", quakes$mag, "</p>",
"<p><strong>Date: </strong>", format(as.Date(quakes$time), "%b %d, %Y")),
group = "Quakes"
) %>%
addLegend(
"bottomleft", pal = binpal, values = ~ACC_VAL,
title = "Seismic risk",
opacity = 0.7
) %>%
addLayersControl(
baseGroups = c("CartoDB", "Toner"),
overlayGroups = "Quakes",
options = layersControlOptions(collapsed = FALSE)
)
seismic
seismic <- seismic_map %>%
setView(lng = -98.5795, lat = 39.828175, zoom = 4) %>%
addProviderTiles("CartoDB.Positron", group = "CartoDB") %>%
addProviderTiles("Stamen.TonerLite", group = "Toner") %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.7,
smoothFactor = 0.1,
color = ~binpal(ACC_VAL)
) %>%
addCircles(
data=quakes,
radius = sqrt(10^quakes$mag)*50,
weight = 0.2,
color = "#000000",
fillColor ="#ffffff",
opacity = 0.7,
popup = paste0("<strong>Magnitude: </strong>", quakes$mag, "</br>",
"<strong>Date: </strong>", format(as.Date(quakes$time), "%b %d, %Y")),
group = "Quakes"
) %>%
addLegend(
"bottomleft", pal = binpal, values = ~ACC_VAL,
title = "Seismic risk",
opacity = 0.7
) %>%
addLayersControl(
baseGroups = c("CartoDB", "Toner"),
overlayGroups = "Quakes",
options = layersControlOptions(collapsed = FALSE)
)
seismic
senate <- fromJSON("senate-113-2014.json")
str(senate)
nodes <- senate$nodes
links <- senate$links %>%
filter(percent_agree > 0.67)
colors <- JS("d3.scale.ordinal().range(['#ff0000','#0000ff','#d2691e'])")
senate_network <- forceNetwork(
Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
NodeID = "id",
Group = "party",
opacity = 1,
bounded = TRUE,
linkColour = "#cccccc",
colourScale = colors
)
senate_network
save.image("~/Dropbox/ucb/2015/dataviz/raw-data/r-interactive/r-interactive.RData")
install_github("rCharts", "ramnathv")
library(devtools)
# read data and replace dots in names with underscores
obesity = read.csv(
'http://www.stat.berkeley.edu/classes/s133/data/obesity.csv',
stringsAsFactors = F
)
names(obesity) = gsub("\\.", "_", names(obesity))
# add column with two letter state names and
obesity = plyr::mutate(obesity,
State = str_trim(State),
state = state.abb[match(State, state.name)],
)
rCharts::choropleth(
cut(Adult_Obesity_Rate, 5, labels = F) ~ state,
data = obesity,
pal = 'PuRd'
)
help(rCharts::choropleth)
rCharts::choropleth
library(plyr)
dat <- read.csv('http://t.co/mN2RgcyQFc')[,c('date', 'pts')]
dat2 <- transform(dat, date = as.numeric(as.POSIXct(date)))
dat3 <- setNames(as.list(dat2$pts), dat2$date)
library(rChartsCalendar)
r1 <- plotCalMap(
data = dat3,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
install_github("ramnathv/rChartsCalendar")
library(plyr)
dat <- read.csv('http://t.co/mN2RgcyQFc')[,c('date', 'pts')]
dat2 <- transform(dat, date = as.numeric(as.POSIXct(date)))
dat3 <- setNames(as.list(dat2$pts), dat2$date)
library(rChartsCalendar)
r1 <- plotCalMap(
data = dat3,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
View(dat)
dat3
library(plyr)
dat <- read.csv('http://t.co/mN2RgcyQFc')[,c('date', 'pts')]
dat2 <- transform(dat, date = as.numeric(as.POSIXct(date)))
dat3 <- setNames(as.list(dat2$pts), dat2$date)
library(rChartsCalendar)
r1 <- plotCalMap(
data = dat3,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
library(plyr)
dat <- read.csv('http://t.co/mN2RgcyQFc')[,c('date', 'pts')]
dat2 <- transform(dat, date = as.numeric(as.POSIXct(date)))
dat3 <- setNames(as.list(dat2$pts), dat2$date)
library(rChartsCalendar)
r1 <- plotCalMap(
data = dat2,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
install.packages("rCharts")
install.packages("rCharts")
