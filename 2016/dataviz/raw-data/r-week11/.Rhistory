+ geom_line(size=1.5) %>%
+ geom_point(size=4) %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
food_stamps_chart <- food_stamps_chart %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
food_stamps_chart %>%
+ geom_line(size=1.5) %>%
+ geom_point(size=4)
food_stamps_chart %>%
+ geom_bar(stat="identity") %>%
+ ggtitle("Column chart")
food_stamps_chart %>%
+ geom_bar(stat="identity", color="#888888", fill="#cccccc") %>%
+ ggtitle("Column chart")
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs)) %>%
+ ggtitle("Column chart")
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs), color="888888") %>%
+ scale_fill_gradient(low="#fff5f0", high="#67000d") %>%
+ ggtitle("Column chart")
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs), color="888888") %>%
+ scale_fill_gradient(name="Costs \n($ billions)", low="#fff5f0", high="#67000d") %>%
+ ggtitle("Column chart")
# Let's use custom colors from ColorBrewer
pal = c("#fee5d9","#fcae91","#fb6a4a","#de2d26")
vals = c(20,40,60)
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs), color="888888") %>%
+ scale_fill_gradientn(name="Costs \n($ billions)", colours = pal, breaks=vals) %>%
+ ggtitle("Food stamp nation")
pfizer <- read_csv("pfizer.csv")
fda <- read_csv("fda.csv")
str(fda)
ca_docs <- pfizer %>% select(first_plus, last_name, city, state, category, total) %>%
filter(category=="Expert-Led Forums" & state=="CA" & total >= 10000) %>%
arrange(desc(total))
ca_docs
quantile(food_stamps$costs,(0:5)/5)
quantile(food_stamps$costs,(1:4)/5)
breaks <- quantile(food_stamps$costs,(0:5)/5)
food_stamps <- food_stamps %>% mutate(cost_bin=cut(costs, breaks, include.lowest=TRUE))
str(food_stamps)
levels(food_stamps$cost_bin) <- c("<5.69","5.69-11.8","11.8-20.6","20.6-31.1",">31.1")
food_stamps_chart_2 <- ggplot(food_stamps, aes(x=year, y=participants, fill=cost_bin)) %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
food_stamps_chart_2 %>%
+ geom_bar(stat="identity") %>%
+ scale_fill_brewer(name="Costs \n($ billions)") %>%
+ ggtitle("Food stamp nation")
display.brewer.all()
food_stamps_chart_2 %>%
+ geom_bar(stat="identity", aes(fill=cost_bin)) %>%
+ scale_fill_brewer(name="Costs \n($ billions)", palette="Reds") %>%
+ ggtitle("Food stamp nation")
ca_docs <- mutate(ca_docs, full_name=paste(first_plus, last_name, sep=" ")) %>%
mutate(doc_fill=ifelse(grepl("GERALD MICHAEL SACKS", full_name), "Sacks", "Others"))
docs_chart <- ggplot(ca_docs, aes(x=full_name, y=total)) + xlab("") + ylab("Payments")
docs_chart %>%
+ geom_bar(stat="identity") %>%
+ coord_flip()
docs_chart <- ggplot(ca_docs, aes(x=reorder(full_name, total), y=total)) + xlab("") + ylab("Payments")
pal2 = c("#a9a9a9","#800000")
docs_chart %>%
+ geom_bar(stat="identity", aes(fill=doc_fill)) %>%
+ scale_fill_manual(values=pal2) %>%
+ scale_y_continuous(label = dollar) %>%
+ coord_flip() %>%
+ guides(fill=FALSE)
indicators <- WDI(indicator=indic_list, country="all", start=1960, end=2014)
indic_list <- c("SP.DYN.LE00.IN", "SH.XPD.PCAP.PP.KD", "SL.UEM.TOTL.ZS")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2014)
View(indicators)
indicators %>%
rename(life_expect=SP.DYN.LE00.IN, health_spend=SH.XPD.PCAP.PP.KD, unemploy_rate=SL.UEM.TOTL.ZS)
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2014) %>%
rename(life_expect=SP.DYN.LE00.IN, health_spend=SH.XPD.PCAP.PP.KD, unemploy_rate=SL.UEM.TOTL.ZS)
View(indicators)
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2014) %>%
rename(life_expect=SP.DYN.LE00.IN, health_spend=SH.XPD.PCAP.PP.KD, unemploy_rate=SL.UEM.TOTL.ZS) %>%
filter(iso2c=="DE"|iso2c=="GR"|iso2c=="RU"|iso2c=="EU")
View(indicators)
indicators %>% filter(iso2c=="DE"|iso2c=="GR"|iso2c=="RU"|iso2c=="EU")
ggplot(indicators, aes(x=year, y=unemploy_rate, color=country)) + geom_line()
devtools::install_github(jcizel/FredR)
library(devtools)
devtools::install_github(jcizel/FredR)
install_github(jcizel/FredR)
install_github("jcizel/FredR)
install_github("jcizel/FredR")
fred <- FredR(a765f040aec293a76cf7c33556284ad3)
library(FredR)
fred <- FredR(a765f040aec293a76cf7c33556284ad3)
fred <- FredR("a765f040aec293a76cf7c33556284ad3")
str(fred,1)
gdp.series <- fred$series.search("GDP")
fred$sources()
fred$sources( )
fred$sources()
gdp <- fred$series.observations(series_id = 'GDPC1')
setwd("~/Dropbox/ucb/2015/dataviz/raw-data/r-week11")
# package to quickly read data into R
library(readr)
# package to draw charts
library(ggplot2)
# package to format axes on those charts as %, $ and so on
library(scales)
# package for manipulating data
library(dplyr)
# package to import data from World Bank World Development Indicators API
library(WDI)
# package to use ColorBrewer color schemes
library(RColorBrewer)
# load disease and democracy data
disease_democ <- read_csv("disease_democ.csv")
# go to the web app, and show the code
ggplot(disease_democ, aes(x=infect_rate, y=democ_score)) + geom_point()
str(disease_democ)
disease_democ_chart <- ggplot(disease_democ, aes(x=infect_rate, y=democ_score))
disease_democ_chart %>%
+ geom_point() %>%
+ geom_smooth()
disease_democ_chart %>%
+ geom_point() %>%
+ geom_smooth(method=lm, se=FALSE) %>%
+ scale_x_continuous(limits=c(0,70)) %>%
+ scale_y_continuous(limits=c(0,100)) %>%
+ xlab ("Infectious disease prevalance score") %>%
+ ylab ("Democratization score")
# work out how to change the color
# load food stamps data
food_stamps <- read_csv("food_stamps.csv")
str(food_stamps)
#let's draw some charts
food_stamps_chart <- ggplot(food_stamps, aes(x=year, y=participants))
food_stamps_chart %>%
+ geom_line()
food_stamps_chart %>%
+ geom_line() %>%
+ geom_point()
food_stamps_chart %>%
+ geom_line(size=1.5) %>%
+ geom_point(size=4) %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
food_stamps_chart <- food_stamps_chart %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
food_stamps_chart %>%
+ geom_bar(stat="identity") %>%
+ ggtitle("Column chart")
# Let's start customizing colors
food_stamps_chart %>%
+ geom_bar(stat="identity", color="#888888", fill="#cccccc") %>%
+ ggtitle("Column chart")
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs)) %>%
+ ggtitle("Column chart")
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs), color="888888") %>%
+ scale_fill_gradient(low="#fff5f0", high="#67000d") %>%
+ ggtitle("Column chart")
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs), color="888888") %>%
+ scale_fill_gradient(name="Costs \n($ billions)", low="#fff5f0", high="#67000d") %>%
+ ggtitle("Column chart")
# Let's use custom colors from ColorBrewer
pal = c("#fee5d9","#fcae91","#fb6a4a","#de2d26")
vals = c(20,40,60)
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs), color="888888") %>%
+ scale_fill_gradientn(name="Costs \n($ billions)", colours = pal, breaks=vals) %>%
+ ggtitle("Food stamp nation")
# dplyr
# load pfizer and fda data
pfizer <- read_csv("pfizer.csv")
fda <- read_csv("fda.csv")
# check the dates have been recognized as dates
str(fda)
# introduce conversions
as.character #converts to text string
as.numeric #converts to number
as.factor #converts to categorical variable
as.integer #converts to integer
# introduce select, filter, arrange, group_by, summarize (also rename)
ca_docs <- pfizer %>% select(first_plus, last_name, city, state, category, total) %>%
filter(category=="Expert-Led Forums" & state=="CA" & total >= 10000) %>%
arrange(desc(total))
# again, see what happens if miss out the brackets
ca_ny_docs <- pfizer %>% select(first_plus, last_name, city, state, category, total) %>%
filter(category=="Expert-Led Forums" & (state=="CA"|state=="NY") & total >= 10000) %>%
arrange(desc(total))
speak_advice <- ca_ny_docs <- pfizer %>% select(first_plus, last_name, city, state, category, total) %>%
filter(category=="Expert-Led Forums"|category=="Professional Advising") %>%
arrange(desc(total))
state_totals <- pfizer %>% group_by(state) %>%
select(state, total) %>%
summarize(state_total = sum(total)) %>%
arrange(desc(state_total))
# show count n
state_totals <- pfizer %>% group_by(state) %>%
select(state, total) %>%
summarize(state_total = sum(total), count_payments = n()) %>%
arrange(desc(state_total))
# working with dates
post2005 <- filter(fda, issued >= "2005-01-01") %>%
arrange(desc(issued))
# subtracting dates is rather easier in R (will get more complicated if you have dates and times)
elapsed <- fda %>% mutate(days_elapsed = Sys.Date()-issued)
# counting letters by year
letters_per_year <- fda %>% group_by(year=format(issued, "%Y")) %>%
summarize(letters=n())
#join
matches <- inner_join(pfizer, fda, by=c("first_name" = "name_first", "last_name" = "name_last")) %>%
filter(category=="Expert-Led Forums")
# http://stat545-ubc.github.io/bit001_dplyr-cheatsheet.html
#Come back to after introducing dplyr
#scale_color_brewer for categorical variables
# binning data
quantile(food_stamps$costs,(0:5)/5)
quantile(food_stamps$costs,(1:4)/5)
breaks <- quantile(food_stamps$costs,(0:5)/5)
# explain do need include.lowest=TRUE
food_stamps <- food_stamps %>% mutate(cost_bin=cut(costs, breaks, include.lowest=TRUE))
str(food_stamps)
# clean up the names for the bins
levels(food_stamps$cost_bin) <- c("<5.69","5.69-11.8","11.8-20.6","20.6-31.1",">31.1")
food_stamps_chart_2 <- ggplot(food_stamps, aes(x=year, y=participants, fill=cost_bin)) %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
food_stamps_chart_2 %>%
+ geom_bar(stat="identity") %>%
+ scale_fill_brewer(name="Costs \n($ billions)") %>%
+ ggtitle("Food stamp nation")
display.brewer.all()
food_stamps_chart_2 %>%
+ geom_bar(stat="identity", aes(fill=cost_bin)) %>%
+ scale_fill_brewer(name="Costs \n($ billions)", palette="Reds") %>%
+ ggtitle("Food stamp nation")
# introduce themes
theme_set(theme_bw())
theme_set(theme_gray())
# run column_theme.R, in each case run the code above
# now back to the ca_docs
theme_set(theme_grey())
ca_docs <- mutate(ca_docs, full_name=paste(first_plus, last_name, sep=" ")) %>%
mutate(doc_fill=ifelse(grepl("GERALD MICHAEL SACKS", full_name), "Sacks", "Others"))
docs_chart <- ggplot(ca_docs, aes(x=full_name, y=total)) + xlab("") + ylab("Payments")
docs_chart %>%
+ geom_bar(stat="identity") %>%
+ coord_flip()
docs_chart <- ggplot(ca_docs, aes(x=reorder(full_name, total), y=total)) + xlab("") + ylab("Payments")
pal2 = c("#a9a9a9","#800000")
docs_chart %>%
+ geom_bar(stat="identity", aes(fill=doc_fill)) %>%
+ scale_fill_manual(values=pal2) %>%
+ scale_y_continuous(label = dollar) %>%
+ coord_flip() %>%
+ guides(fill=FALSE)
# Greek data
indic_list <- c("SP.DYN.LE00.IN", "SH.XPD.PCAP.PP.KD", "SL.UEM.TOTL.ZS")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2014) %>%
rename(life_expect=SP.DYN.LE00.IN, health_spend=SH.XPD.PCAP.PP.KD, unemploy_rate=SL.UEM.TOTL.ZS) %>%
filter(iso2c=="DE"|iso2c=="GR"|iso2c=="RU"|iso2c=="EU")
ggplot(indicators, aes(x=year, y=unemploy_rate, color=country)) + geom_line()
save.image("week11.RData")
save.image("~/Dropbox/ucb/2015/dataviz/raw-data/r-week11/week11.RData")
View(ca_docs)
disease_democ <- read.csv("~/Dropbox/ucb/2015/dataviz/raw-data/r-week11/disease_democ.csv")
View(disease_democ)
disease_democ <- read_csv("disease_democ.csv")
View(disease_democ)
str(disease_democ)
head(disease_democ,10)
head(disease_democ,10)
tail(disease_democ,10)
disease_democ$infect_rate
summarize(disease_democ)
summary(disease_democ)
disease_democ_chart %>%
+ geom_point() %>%
+ geom_smooth()
help(c)
vignette("column-types")
disease_democ$infect_rate <- as.factor(disease_democ$infect_rate)
View(disease_democ)
str(disease_democ)
disease_democ$income_group <- as.factor(disease_democ$income_group)
str(disease_democ)
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs)) %>%
+ ggtitle("Column chart")
food_stamps_chart <- ggplot(food_stamps, aes(x=year, y=participants))  %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
food_stamps_chart %>%
+ geom_bar(stat="identity", aes(fill=costs)) %>%
+ ggtitle("Column chart")
ca_docs <- pfizer %>%
select(first_plus, last_name, city, state, category, total) %>%
filter(category=="Expert-Led Forums" & state=="CA" & total >= 10000) %>%
arrange(desc(total))
View(ca_docs)
quantile(food_stamps$costs,(0:5)/5)
docs_chart %>%
+ geom_bar(stat="identity", aes(fill=doc_fill)) %>%
+ scale_fill_manual(values=pal2) %>%
+ scale_y_continuous(label = %) %>%
+ coord_flip() %>%
+ guides(fill=FALSE)
docs_chart %>%
+ geom_bar(stat="identity", aes(fill=doc_fill)) %>%
+ scale_fill_manual(values=pal2) %>%
+ scale_y_continuous(label = percent) %>%
+ coord_flip() %>%
+ guides(fill=FALSE)
View(indicators)
ggplot(indicators, aes(x=year, y=unemploy_rate, color=country)) + geom_line(size=3) + scale_y_continuous(label = percent)
ggplot(indicators, aes(x=year, y=unemploy_rate, color=country)) + geom_line(size=2) + scale_y_continuous(label = percent)
ggplot(indicators, aes(x=year, y=unemploy_rate, color=country)) + geom_line(size=2) + scale_y_continuous(label = percent) + scale_color_brewer(palette="Set1")
View(indicators)
ggplot(indicators, aes(x=year, y=health_spend, color=country)) + geom_line(size=2) + scale_y_continuous(label = percent) + scale_color_brewer(palette="Set1")
ggplot(indicators, aes(x=year, y=health_spend, color=country)) + geom_line(size=2) + scale_y_continuous(label = dolalr) + scale_color_brewer(palette="Set1")
ggplot(indicators, aes(x=year, y=health_spend, color=country)) + geom_line(size=2) + scale_y_continuous(label = dollar) + scale_color_brewer(palette="Set1")
ggplot(indicators, aes(x=year, y=health_spend, color=country)) + geom_line(size=2) + scale_y_continuous(label = dollar) + scale_color_brewer(palette="Set1") + scale_x_continuous(limits = c(1995,2013))
food_stamps <- read_csv("food_stamps.csv")
setwd("~/Dropbox/ucb/2015/dataviz/raw-data/r-week11")
str(food_stamps)
food_stamps <- read_csv("food_stamps.csv")
library(readr)
# package to draw charts
library(ggplot2)
# package to format axes on those charts as %, $ and so on
library(scales)
# package for manipulating data
library(dplyr)
# package to use ColorBrewer color schemes
library(RColorBrewer)
# package to import data from World Bank World Development Indicators API
library(WDI)
food_stamps <- read_csv("food_stamps.csv")
library('ggplot2')
library('grid')
library('RColorBrewer')
########### Example plots #################
####Bar
##1 color
#print(ggplot(mtcars, aes(factor(cyl))) + geom_bar() + coord_cartesian(ylim = c(0, 100))+ggtitle("Title"))
##3 colors
#print(qplot(factor(cyl), data=mtcars, geom="bar", fill=factor(cyl))+ggtitle("Title"))
##5 colors
#print(ggplot(diamonds, aes(clarity, fill=cut)) + geom_bar() +ggtitle("Title") + coord_cartesian(ylim = c(0, 15000)))
####Scatter
##3 colors
#print(ggplot(mtcars, aes(wt, mpg))+geom_point(aes(colour = factor(cyl)))+ggtitle("Title"))
##9 colors
# dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
# d <- qplot(carat, price, data=dsamp, colour=clarity, size = 3)
# print(d+ggtitle("Title"))
###Line
##3 colors
# mtcars.long <- melt(mtcars, id = "mpg", measure = c("disp", "hp", "wt"))
# print(ggplot(mtcars.long, aes(mpg, value, colour = variable)) + geom_line()+ggtitle("Title"))
###Facet Grid
# p <- ggplot(mtcars, aes(mpg, wt)) + geom_point() + ggtitle("Title")
# print(p + facet_grid(vs ~ am, margins=TRUE))
###Histogram
##22 colors
# print(ggplot(mtcars) + scale_fill_manual(values = extendedPalette(22)) + geom_histogram(aes(factor(hp), fill=factor(hp))))
####################################
#resize window to 650 px width
quartz.options(width = 8.33333333333333, height = 5.55555555555556, dpi = 72)
# For windows, uncomment below line (and comment out above line)
#windows.options(width = 8.33333333333333, height = 5.55555555555556)
#################### redefine default ggplot theme ###################
theme_new <- theme_set(theme_bw())
theme_new <- theme_update(
line = element_line(colour = "#000000", size = 0.5, linetype = 1L, lineend = "butt"), rect = element_rect(fill = "#ffffff", colour = "#000000", size = 0, linetype = 1L), text = element_text(family = "", face = "plain", colour = "#000000", size = 12, hjust = 0, vjust = 0, angle = 0, lineheight = 0.9), title = element_blank(), axis.text = element_text(family = NULL, face = "bold", colour = NULL, size = NULL, hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), strip.text = element_text(family = NULL, face = "bold", colour = NULL, size = NULL, hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.line = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), axis.text.x = element_text(family = NULL, face = NULL, colour = NULL, size = NULL, hjust = 0.5, vjust = 0.5, angle = NULL, lineheight = NULL), axis.text.y = element_text(family = NULL, face = NULL, colour = NULL, size = NULL, hjust = 0.5, vjust = 0.5, angle = NULL, lineheight = NULL), axis.ticks = element_blank(), axis.title.x = element_text(family = NULL, face = NULL, colour = NULL, size = 10, hjust = 0.5, vjust = NULL, angle = NULL, lineheight = NULL), axis.title.y = element_text(family = NULL, face = NULL, colour = NULL, size = NULL, hjust = NULL, vjust = 0.5, angle = NULL, lineheight = NULL), axis.ticks.length = unit(4, "points"), axis.ticks.margin = unit(0.3, "points"), legend.background = element_blank(), legend.margin = unit(1, "points"), legend.key = element_rect(fill = NULL, colour = NULL, size = NULL, linetype = 0L), legend.key.size = unit(1, "points"), legend.key.height = unit(10, "points"), legend.key.width = unit(10, "points"), legend.text = element_text(family = NULL, face = "bold", colour = NULL, size = 12, hjust = NULL, vjust = NULL, angle = 0, lineheight = NULL), legend.text.align = 0, legend.title = element_text(family = NULL, face = NULL, colour = NULL, size = NULL, hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), legend.title.align = NULL, legend.position = "top", legend.direction = "horizontal", legend.justification = NULL, legend.box = "horizontal", panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid.minor = element_blank(), panel.margin = unit(2, "points"), panel.margin.x = NULL, panel.margin.y = NULL, strip.background = element_rect(fill = NULL, colour = NULL, size = NULL, linetype = NULL), strip.text.x = element_text(family = NULL, face = NULL, colour = NULL, size = NULL, hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), strip.text.y = element_text(family = NULL, face = NULL, colour = NULL, size = NULL, hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), plot.background = element_blank(), plot.title = element_text(family = NULL, face = NULL, colour = NULL, size = NULL, hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), plot.margin = unit(c(30, 30, 30, 30), "points"), axis.line.x = element_blank(), axis.line.y = element_blank(), axis.title = element_text(family = NULL, face = "bold", colour = NULL, size = 10, hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL), axis.ticks.x = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), axis.ticks.y = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid = element_line(colour = "#DBDBDB", size = 0.5, linetype = NULL, lineend = NULL), panel.grid.major.x = element_blank(), panel.grid.major.y = element_line(colour = NULL, size = 0.3, linetype = NULL, lineend = NULL), panel.grid.minor.x = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL), panel.grid.minor.y = element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL)
)
#############################
#Redefine default discrete colors, up to 9 colors.
scale_colour_discrete <- function(...) scale_colour_custom(..., palette="Set1")
scale_fill_discrete <- function(...) scale_fill_custom(... , palette="Set1")
#################### Functions to Define custom colours #####################
divlist<-c("BrBG","PiYG","PRGn","PuOr","RdBu","RdGy","RdYlBu","RdYlGn","Spectral")
quallist<-c("Accent","Dark2","Paired","Pastel1","Pastel2","Set1","Set2","Set3")
seqlist<-c("Blues","BuGn","BuPu","GnBu","Greens","Greys","Oranges","OrRd",
"PuBu","PuBuGn","PuRd","Purples","RdPu","Reds","YlGn","YlGnBu","YlOrBr","YlOrRd")
divnum <- rep(11, length(divlist))
qualnum <- c( 8, 8, 12, 9, 8, 9, 8, 12)
seqnum <- rep(9, length(seqlist))
namelist<-c(divlist,quallist,seqlist)
maxcolours <- c(divnum,qualnum,seqnum)
catlist<-rep(c("div","qual","seq"),c(length(divlist),length(quallist),length(seqlist)))
custom.pal.info<-data.frame(maxcolours=maxcolours,category=catlist,row.names=namelist)
custom.pal<-function(n,name){
if(!(name %in% namelist)){
stop(paste(name,"is not a valid palette name for custom.pal\n"))
}
if(n<3){
warning("minimal value for n is 3, returning requested palette with 3 different levels\n")
return(custom.pal(3,name))
}
if(n>maxcolours[which(name==namelist)]){
warning(paste("n too large, allowed maximum for palette",name,"is",maxcolours[which(name==namelist)]),
"\nReturning the palette you asked for with that many colours\n")
return(custom.pal(maxcolours[which(name==namelist)],name))
}
c1 <- col2rgb("#F8766D")
c2 <- col2rgb("#00BA38")
c3 <- col2rgb("#619CFF")
c4 <- col2rgb("#D39200")
c5 <- col2rgb("#00C19F")
c6 <- col2rgb("#DB72FB")
c7 <- col2rgb("#93AA00")
c8 <- col2rgb("#00B9E3")
c9 <- col2rgb("#FF61C3")
switch(name,
Set1 =  switch(n,
rgb(c(c1[1]),
c(c1[2]),
c(c1[3]),maxColorValue=255),
rgb(c(c1[1],c2[1]),
c(c1[2],c2[2]),
c(c1[3],c2[3]),maxColorValue=255),
rgb(c(c1[1],c2[1],c3[1]),
c(c1[2],c2[2],c3[2]),
c(c1[3],c2[3],c3[3]),maxColorValue=255),
rgb(c(c1[1],c2[1],c3[1],c4[1]),
c(c1[2],c2[2],c3[2],c4[2]),
c(c1[3],c2[3],c3[3],c4[3]),maxColorValue=255),
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1]),
c(c1[2],c2[2],c3[2],c4[2],c5[2]),
c(c1[3],c2[3],c3[3],c4[3],c5[3]),maxColorValue=255),
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1],c6[1]),
c(c1[2],c2[2],c3[2],c4[2],c5[2],c6[2]),
c(c1[3],c2[3],c3[3],c4[3],c5[3],c6[3]),maxColorValue=255),
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1],c6[1],c7[1]),
c(c1[2],c2[2],c3[2],c4[2],c5[2],c6[2],c7[2]),
c(c1[3],c2[3],c3[3],c4[3],c5[3],c6[3],c7[3]),maxColorValue=255),
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1],c6[1],c7[1],c8[1]),
c(c1[2],c2[2],c3[2],c4[2],c5[2],c6[2],c7[2],c8[2]),
c(c1[3],c2[3],c3[3],c4[3],c5[3],c6[3],c7[3],c8[3]),maxColorValue=255),
rgb(c(c1[1],c2[1],c3[1],c4[1],c5[1],c6[1],c7[1],c8[1],c9[1]),
c(c1[2],c2[2],c3[2],c4[2],c5[2],c6[2],c7[2],c8[2],c9[2]),
c(c1[3],c2[3],c3[3],c4[3],c5[3],c6[3],c7[3],c8[3],c9[3]),maxColorValue=255),
),
Set2 =  switch(n,
rgb(c(154),
c(62),
c(37),maxColorValue=255),
rgb(c(154,21),
c(62,107),
c(37,144),maxColorValue=255),
rgb(c(154,21,112),
c(62,107,130),
c(37,144,89),maxColorValue=255)
)
)
}
pal_name <- function(palette, type) {
if (is.character(palette)) {
if (!palette %in% RColorBrewer:::namelist) {
warning("Unknown palette ", palette)
palette <- "Set1"
}
return(palette)
}
switch(type,
div = divlist,
qual = quallist,
seq = seqlist,
stop("Unknown palette type. Should be 'div', 'qual' or 'seq'",
call. = FALSE)
)[palette]
}
custom_pal <- function(type = "seq", palette = 1) {
pal <- pal_name(palette, type)
function(n) {
if (n < 3)
suppressWarnings(custom.pal(n, pal))[seq_len(n)]
else
custom.pal(n, pal)[seq_len(n)]
}
}
scale_colour_custom <- function(..., type = "seq", palette = 1) {
discrete_scale("colour", "custom", custom_pal(type, palette), ...)
}
#' @export
#' @rdname scale_custom
scale_fill_custom <- function(..., type = "seq", palette = 1) {
discrete_scale("fill", "custom", custom_pal(type, palette), ...)
}
quantile(food_stamps$costs,(0:5)/5)
breaks <- quantile(food_stamps$costs,(0:5)/5)
food_stamps <- food_stamps %>% mutate(cost_bin=cut(costs, breaks, include.lowest=TRUE))
levels(food_stamps$cost_bin) <- c("<5.69","5.69-11.8","11.8-20.6","20.6-31.1",">31.1")
food_stamps_chart_2 %>%
+ geom_bar(stat="identity", aes(fill=cost_bin)) %>%
+ scale_fill_brewer(name="Costs \n($ billions)", palette="Reds") %>%
+ ggtitle("Food stamp nation")
food_stamps_chart_2 <- ggplot(food_stamps, aes(x=year, y=participants, fill=cost_bin)) %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
food_stamps_chart_2 %>%
+ geom_bar(stat="identity", aes(fill=cost_bin)) %>%
+ scale_fill_brewer(name="Costs \n($ billions)", palette="Reds") %>%
+ ggtitle("Food stamp nation")
