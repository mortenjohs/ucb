write(health_spend, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/health_spend.txt")
unemploy_rate_line <- nPlot(unemploy_rate ~ year, group="country", data = countries2, type = "lineChart")
unemploy_rate_line$yAxis(tickFormat="#! d3.format(',0f%') !#", axisLabel=("Health spending per person"))
unemploy_rate <- capture.output(unemploy_rate_line$print("chart"))
write(unemploy_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/unemploy_rate.txt")
unemploy_rate_line <- nPlot(unemploy_rate ~ year, group="country", data = countries2, type = "lineChart")
unemploy_rate_line$yAxis(tickFormat="#! d3.format(',%') !#", axisLabel=("Unemployment rate"))
unemploy_rate <- capture.output(unemploy_rate_line$print("chart"))
write(unemploy_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/unemploy_rate.txt")
unemploy_rate_line <- nPlot(unemploy_rate ~ year, group="country", data = countries2, type = "lineChart")
unemploy_rate_line$yAxis(tickFormat="#! d3.format(',0f%') !#", axisLabel=("Unemployment rate"))
unemploy_rate <- capture.output(unemploy_rate_line$print("chart"))
write(unemploy_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/unemploy_rate.txt")
unemploy_rate_line <- nPlot(unemploy_rate ~ year, group="country", data = countries2, type = "lineChart")
unemploy_rate_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Unemployment rate (%)"))
unemploy_rate <- capture.output(unemploy_rate_line$print("chart"))
write(unemploy_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/unemploy_rate.txt")
life_expect_line <- nPlot(life_expect ~ year, group="country", data = countries, type = "lineChart")
life_expect_line$yAxis(axisLabel=("Life expectancy at birth (years)"))
life_expect_line$margin({left: 100})
life_expect_line <- nPlot(life_expect ~ year, group="country", data = countries, type = "lineChart")
life_expect_line$yAxis(axisLabel=("Life expectancy at birth (years)"), margin={left: 100})
life_expect_line <- nPlot(life_expect ~ year, group="country", data = countries, type = "lineChart")
life_expect_line$yAxis(axisLabel=("Life expectancy at birth (years)"), margin=100)
life_expect <- capture.output(life_expect_line$print("chart"))
write(life_expect, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/life_expect.txt")
life_expect_line <- nPlot(life_expect ~ year, group="country", data = countries, type = "lineChart")
life_expect_line$yAxis(axisLabel=("Life expectancy at birth (years)"), margin={left:50})
life_expect_line <- nPlot(life_expect ~ year, group="country", data = countries, type = "lineChart")
life_expect_line$yAxis(axisLabel=("Life expectancy at birth (years)"), margin="#!{left:50}!#")
life_expect <- capture.output(life_expect_line$print("chart"))
write(life_expect, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/life_expect.txt")
spend <- filter(countries2, year>=1994)
health_spend_line <- nPlot(health_spend ~ year, group="country", data = spend, type = "lineChart")
health_spend_line$yAxis(tickFormat="#! d3.format('$,0f') !#", axisLabel=("Health spending per person"))
health_spend <- capture.output(health_spend_line$print("chart"))
write(health_spend, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/health_spend.txt")
spend <- filter(countries2, year>=1995)
health_spend_line <- nPlot(health_spend ~ year, group="country", data = spend, type = "lineChart")
health_spend_line$yAxis(tickFormat="#! d3.format('$,0f') !#", axisLabel=("Health spending per person"))
health_spend <- capture.output(health_spend_line$print("chart"))
write(health_spend, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/health_spend.txt")
library(readr)
library(tidyr)
suicide <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/suicide.tsv")
View(suicide)
suicide <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/suicide.tsv")
doctors <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/doctors.tsv")
suicide <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/suicide.tsv") %>%
gather(country, suicide_rate)
View(suicide)
suicide <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/suicide.tsv") %>%
gather(country, suicide_rate, -Years)
View(suicide)
str(suicide)
suicide <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/suicide.tsv") %>%
gather(country, suicide_rate, -Years) %>%
mutate(year=Years) %>%
mutate(country = relevel(country, "Greece")) %>%
arrange(country)
View(suicide)
suicide <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/suicide.tsv") %>%
gather(country, suicide_rate, -Years) %>%
rename(year=Years) %>%
mutate(country = relevel(country, "Greece")) %>%
arrange(country)
View(suicide)
doctors <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/doctors.tsv") %>%
gather(country, doctors_rate, -Years) %>%
rename(year=Years) %>%
mutate(country = relevel(country, "Greece")) %>%
arrange(country)
View(doctors)
suicide_line <- nPlot(suicide ~ year, group="country", data = spend, type = "lineChart")
suicide_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Suicide and self injury death rate (per 100,000 people"))
suicide <- capture.output(suicide_line$print("chart"))
write(suicide, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/suicide.txt")
suicide_line <- nPlot(suicide_rate ~ year, group="country", data = suicide, type = "lineChart")
suicide_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Suicide and self injury death rate (per 100,000 people"))
suicide <- capture.output(suicide_line$print("chart"))
write(suicide, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/suicide.txt")
suicide <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/suicide.tsv") %>%
gather(country, suicide_rate, -Years) %>%
rename(year=Years) %>%
mutate(country = relevel(country, "Greece")) %>%
arrange(country)
suicide_line <- nPlot(suicide_rate ~ year, group="country", data = suicide, type = "lineChart")
suicide_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Suicide and self injury death rate (per 100,000 people)"))
suicide_rate <- capture.output(suicide_line$print("chart"))
write(suicide_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/suicide.txt")
View(suicide)
View(suicide)
suicide_line <- nPlot(suicide_rate ~ year, group="country", data = suicide, type = "lineChart")
suicide_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Suicide and self injury death rate (per 100,000 people)"))
suicide_rate <- capture.output(suicide_line$print("chart"))
write(suicide_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/suicide.txt")
write(suicide_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/suicide_rate.txt")
doctors_line <- nPlot(doctors_rate ~ year, group="country", data = doctors, type = "lineChart")
doctors_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Suicide and self injury death rate (per 100,000 people)"))
doctors_rate <- capture.output(doctors_line$print("chart"))
write(doctors_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/doctors_rate.txt")
doctors_line <- nPlot(doctors_rate ~ year, group="country", data = doctors, type = "lineChart")
doctors_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Doctors per 100,000 people"))
doctors_rate <- capture.output(doctors_line$print("chart"))
write(doctors_rate, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/doctors_rate.txt")
View(suicide)
hiv <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/hiv.tsv") %>%
gather(country, hiv_prev, -Years) %>%
rename(year=Years) %>%
mutate(country = relevel(country, "Greece")) %>%
arrange(country)
# hiv chart
hiv_line <- nPlot(suicide_rate ~ year, group="country", data = hiv, type = "lineChart")
hiv_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Incidence of HIV (per 100,000 people)"))
hiv_incid <- capture.output(hiv_line$print("chart"))
write(hiv_incid, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/hiv_incid.txt")
hiv <- read_tsv("~/Dropbox/buzzfeed/stories/Greek health crisis/data/hiv.tsv") %>%
gather(country, hiv_incidence, -Years) %>%
rename(year=Years) %>%
mutate(country = relevel(country, "Greece")) %>%
arrange(country)
# hiv chart
hiv_line <- nPlot(hiv_incidence ~ year, group="country", data = hiv, type = "lineChart")
hiv_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("Incidence of HIV (per 100,000 people)"))
hiv_incid <- capture.output(hiv_line$print("chart"))
write(hiv_incid, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/hiv_incid.txt")
# hiv chart
hiv_line <- nPlot(hiv_incidence ~ year, group="country", data = hiv, type = "lineChart")
hiv_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("New HIV infections (per 100,000 people)"))
hiv_incid <- capture.output(hiv_line$print("chart"))
write(hiv_incid, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/hiv_incid.txt")
# hiv chart
hiv_line <- nPlot(hiv_incidence ~ year, group="country", data = hiv, type = "lineChart")
hiv_line$yAxis(tickFormat="#! d3.format(',0f') !#", axisLabel=("New HIV cases (per 100,000 people)"))
hiv_incid <- capture.output(hiv_line$print("chart"))
write(hiv_incid, file="~/Dropbox/buzzfeed/stories/Greek health crisis/data/interactive/hiv_incid.txt")
# load required packages
library(dplyr)
library(readr)
library(ggplot2)
library(scales)
library(DT)
library(devtools)
library(rCharts)
# import data
report <- read_tsv("~/Dropbox/buzzfeed/stories/primate research/data/acis/report.tsv")
inspection <- read_tsv("~/Dropbox/buzzfeed/stories/primate research/data/acis/inspection.tsv")
citation <- read_tsv("~/Dropbox/buzzfeed/stories/primate research/data/acis/citation.tsv")
facility <- read_tsv("~/Dropbox/buzzfeed/stories/primate research/data/acis/facility.tsv")
# edit field types
citation <- mutate(citation, inspection_id = as.character(inspection_id))
inspection <- mutate(inspection, inspection_id = as.character(inspection_id), cust_num = as.character(cust_num), inspection_date=as.Date(strptime(inspection_date, "%Y-%m-%dT%H:%M:%SZ")))
report <- mutate(report, cust_num = as.character(cust_num))
facility <- mutate(facility, cust_num = as.character(cust_num))
# filter the annual reports for primates only
primates <- filter(report, col_a == "NONHUMAN PRIMATES") %>%
inner_join(facility)
# extract the numbers of primates held for breeding etc, and used in experiments of various types, by year and facility
held_facils <- filter(primates, col_b > 0) %>%
select(fiscal_year, name, city, state, col_b) %>%
arrange(desc(fiscal_year), desc(col_b))
used_facils <- filter(primates, col_f > 0) %>%
select(fiscal_year, name, city, state, col_f) %>%
arrange(desc(fiscal_year), desc(col_f))
distress_allev_facils <- filter(primates, col_d > 0) %>%
select(fiscal_year, name, city, state, col_d) %>%
arrange(desc(fiscal_year), desc(col_d))
distress_not_allev_facils <- filter(primates, col_e > 0) %>%
select(fiscal_year, name, city, cert_num, state, col_e) %>%
arrange(desc(fiscal_year), desc(col_e))
held_totals <- group_by(primates, fiscal_year) %>%
summarise(total = sum(col_b))
used_totals <- group_by(primates, fiscal_year) %>%
summarise(total = sum(col_f))
distress_allev_totals <- group_by(primates, fiscal_year) %>%
summarise(total = sum(col_d))
distress_not_allev_totals <- group_by(primates, fiscal_year) %>%
summarise(total = sum(col_e))
pharma_not_allev_totals <- filter(distress_not_allev_facils, grepl("PFIZER|MERCK|BOEHRINGER|NOVARTIS|LILLY|GLAXO|SQUIBB|ROCHE", name)) %>%
group_by(fiscal_year) %>%
summarise(total = sum(col_e))
federal_not_allev_totals <- filter(distress_not_allev_facils, grepl("-F-", cert_num)) %>%
group_by(fiscal_year) %>%
summarise(total = sum(col_e))
other_not_allev_totals <- filter(distress_not_allev_facils, !grepl("PFIZER|MERCK|BOEHRINGER|NOVARTIS|LILLY|GLAXO|SQUIBB|ROCHE", name)) %>%
filter(!grepl("-F-", cert_num)) %>%
group_by(fiscal_year) %>%
summarise(total = sum(col_e))
# chart for publication
stacked_bar <- mutate(distress_not_allev_facils, type = ifelse(grepl("PFIZER|MERCK|BOEHRINGER|NOVARTIS|LILLY|GLAXO|SQUIBB|ROCHE", name), "Big pharma", "Other labs")) %>%
group_by(fiscal_year, type) %>%
summarise(total = sum(col_e))
ggplot(stacked_bar, aes(x=fiscal_year, y=total, fill=type)) + geom_bar(stat="identity") + xlab("Year") + ylab("Primates used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Pain or distress, not alleviated")
barchart <- nPlot(total ~ fiscal_year, group = "type", data = stacked_bar, type = "multiBarChart")
barchart$yAxis( tickFormat="#! d3.format(',0f') !#" )
barchart$print("chart")
barchart$save("~/Dropbox/buzzfeed/stories/primate research/barchart.html", cdn = TRUE)
barchart$save("~/Dropbox/buzzfeed/stories/primate research/barchart.html", standalone = TRUE)
barchart$print("chart")
# draw other charts
ggplot(distress_not_allev_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Primates used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Pain or distress, not alleviated")
ggplot(distress_allev_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Primates used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Pain or distress, alleviated")
ggplot(used_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Primates used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Total")
ggplot(pharma_not_allev_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Primates used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Pharma, pain or distress, not alleviated")
ggplot(federal_not_allev_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Primates used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Federal, pain or distress, not alleviated")
ggplot(other_not_allev_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Primates used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Other labs, pain or distress, not alleviated")
# count annual reports involving primates by year
count_primate_reports <- group_by(primates, fiscal_year) %>%
summarise(count = n())
# make table showing facilities data
facil_table <- select(distress_not_allev_facils, fiscal_year, city, state, name, col_e)
write.table(facil_table, "~/Dropbox/buzzfeed/stories/primate research/data/acis/facil_table.txt", row.names = FALSE, sep = "\t", na = "")
#clean then reimport, and make web data table
facil_table <- read_csv("~/Dropbox/buzzfeed/stories/primate research/data/acis/facil_table_cleaned.csv") %>%
select(Year,Name,5) %>%
group_by(Year)
datatable(facil_table, rownames = FALSE, extensions = c('Scroller', 'Responsive'),  options = list(
deferRender = TRUE,
autoWidth = TRUE,
scrollY = 400,
scrollCollapse = FALSE,
dom = 'ft',
pageLength = 500,
columnDefs = list(list(className = 'dt-center', targets = c(0,2)))
))
# count facilities with active licenses
count_active <- group_by(facility, cert_status) %>%
summarise(count =n())
# top users of column E primates 1999-2014
top_users <- group_by(distress_not_allev_facils, name) %>%
summarise(total = sum(col_e)) %>%
arrange(desc(total))
# top users of column E primates 2002-2014
top_users_since_2002 <- filter(distress_not_allev_facils, fiscal_year >=2002) %>%
group_by(name) %>%
summarise(total = sum(col_e)) %>%
arrange(desc(total))
# repeat column E analysis for all species
all <- inner_join(report, facility)
distress_not_allev_all <- filter(all, col_e > 0) %>%
select(fiscal_year, name, city, cert_num, state, col_e) %>%
arrange(desc(fiscal_year), desc(col_e))
distress_not_allev_all_totals <- group_by(all, fiscal_year) %>%
summarise(total = sum(col_e))
pharma_not_allev_all_totals <- filter(distress_not_allev_all, grepl("PFIZER|MERCK|BOEHRINGER|NOVARTIS|LILLY|GLAXO|SQUIBB|ROCHE", name)) %>%
group_by(fiscal_year) %>%
summarise(total = sum(col_e))
federal_not_allev_all_totals <- filter(distress_not_allev_all, grepl("-F-", cert_num)) %>%
group_by(fiscal_year) %>%
summarise(total = sum(col_e))
other_not_allev_all_totals <- filter(distress_not_allev_all, !grepl("PFIZER|MERCK|BOEHRINGER|NOVARTIS|LILLY|GLAXO|SQUIBB|ROCHE", name)) %>%
filter(!grepl("-F-", cert_num)) %>%
group_by(fiscal_year) %>%
summarise(total = sum(col_e))
ggplot(distress_not_allev_all_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Animals used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Pain or distress, not alleviated")
ggplot(pharma_not_allev_all_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Animals used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Pharma, pain or distress, not alleviated")
ggplot(federal_not_allev_all_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Animals used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Federal, pain or distress, not alleviated")
ggplot(other_not_allev_all_totals, aes(x=fiscal_year, y=total)) + geom_bar(stat="identity") + xlab("Year") + ylab("Animals used") + xlim(c(1998,2015)) + scale_y_continuous(labels = comma) + ggtitle ("Other labs, pain or distress, not alleviated")
all_table <- select(distress_not_allev_all, cert_num, fiscal_year, name, city, state, col_e) %>%
rename(Year=fiscal_year, Name=name, City=city, State=state) %>%
group_by(Year, Name, State) %>%
summarise(Total=sum(col_e))
all_table <- ungroup(all_table) %>%
arrange(desc(Year), desc(Total))
datatable(all_table, rownames = FALSE, extensions = 'Scroller', options = list(
deferRender = TRUE,
scrollY = 400,
scrollCollapse = TRUE,
dom = "ft",
pageLength = 500
))
# Import approvals data and make web table
approvals <- read_csv("~/Dropbox/buzzfeed/stories/primate research/data/approvals.csv") %>%
arrange(desc(Approved)) %>%
mutate(Approved = format(Approved, format("%B %e, %Y")))
datatable(approvals, rownames = FALSE, extensions = c('Scroller', 'Responsive'),  options = list(
ordering = FALSE,
deferRender = TRUE,
autoWidth = FALSE,
scrollY = 270,
scrollCollapse = FALSE,
dom = 't',
pageLength = 8
))
View(inspection)
View(all)
View(facil_table)
View(facility)
approvals <- read_csv("~/Dropbox/buzzfeed/stories/primate research/data/approvals.csv") %>%
arrange(desc(Approved)) %>%
mutate(Approved = format(Approved, format("%B %e, %Y")))
datatable(approvals, rownames = FALSE, extensions = c('Scroller', 'Responsive'),  options = list(
ordering = FALSE,
deferRender = TRUE,
autoWidth = FALSE,
scrollY = 270,
scrollCollapse = FALSE,
dom = 't',
pageLength = 8
))
datatable(all_table, rownames = FALSE, extensions = 'Scroller', options = list(
deferRender = TRUE,
scrollY = 400,
scrollCollapse = TRUE,
dom = "ft",
pageLength = 500
))
datatable(approvals, rownames = FALSE, extensions = c('Scroller', 'Responsive'),  options = list(
columnDefs = list(list(className = 'dt-center', targets = c(0,1,2,3))),
ordering = FALSE,
deferRender = TRUE,
autoWidth = FALSE,
scrollY = 270,
scrollCollapse = FALSE,
dom = 't',
pageLength = 8
))
datatable(all_table, rownames = FALSE, extensions = 'Scroller', options = list(
columnDefs = list(list(className = 'dt-center', targets = c(0,1,2,3))),
deferRender = TRUE,
scrollY = 400,
scrollCollapse = TRUE,
dom = "ft",
pageLength = 500
))
datatable(facil_table, rownames = FALSE, extensions = c('Scroller', 'Responsive'),  options = list(
deferRender = TRUE,
autoWidth = TRUE,
scrollY = 400,
scrollCollapse = FALSE,
dom = 'ft',
pageLength = 500,
columnDefs = list(list(className = 'dt-center', targets = c(0,1,2)))
))
datatable(facil_table, rownames = FALSE, extensions = c('Scroller', 'Responsive'),  options = list(
deferRender = TRUE,
autoWidth = TRUE,
scrollY = 400,
scrollCollapse = FALSE,
dom = 'ft',
pageLength = 500,
columnDefs = list(list(className = 'dt-center', targets = c(0,2)))
))
save.image("~/Dropbox/buzzfeed/stories/primate research/data/acis/acis.RData")
library(rvest)
load("/Users/Peter/Dropbox/katrina/storms.RData")
storms_all <- read_tsv("~/Dropbox/katrina/storms.tsv", col_types = list(
timestamp = col_datetime(),
min_press = col_double()))
landfalls <- read_csv("~/Dropbox/katrina/landfalls_notl_export.csv")
storms_all_plus <- rbind(storms_all, landfalls) %>%
arrange(year, name, latitude, longitude) %>%
mutate(timestamp=as.Date(na.approx(timestamp)))
library(readr)
library(dplyr)
library(tidyr)
library(rCharts)
library(DT)
library(zoo)
storms_all <- read_tsv("~/Dropbox/katrina/storms.tsv", col_types = list(
timestamp = col_datetime(),
min_press = col_double()))
landfalls <- read_csv("~/Dropbox/katrina/landfalls_notl_export.csv")
storms_all_plus <- rbind(storms_all, landfalls) %>%
arrange(year, name, latitude, longitude) %>%
mutate(timestamp=(na.approx(timestamp))
storms_all_plus <- rbind(storms_all, landfalls) %>%
arrange(year, name, latitude, longitude) %>%
mutate(timestamp=time(na.approx(timestamp)))
storms_all <- read_tsv("~/Dropbox/katrina/storms.tsv", col_types = list(
timestamp = col_datetime(),
min_press = col_double()))
landfalls <- read_csv("~/Dropbox/katrina/landfalls_notl_export.csv")
storms_all_plus <- rbind(storms_all, landfalls) %>%
arrange(year, name, latitude, longitude) %>%
mutate(timestamp=time(na.approx(timestamp)))
View(storms_all_plus)
devtools::install_github("cdalzell/Lahman/tree/feature/v4.0-0")
devtools::install_github("cdalzell/Lahman/tree/feature/v4.0-0")
library(devtools)
devtools::install_github("cdalzell/Lahman/tree/feature/v4.0-0")
devtools::install_github("rstudio/leaflet")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
library(leaflet)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addProviderTiles("CartoDB.Positron")
m %>% addProviderTiles("OpenWeatherMap.Pressure")
m %>% addProviderTiles("MtbMap") %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)
) %>%
addProviderTiles("Stamen.TonerLabels")
m <- leaflet()
m %>% addProviderTiles("CartoDB.Positron")
m %>% addProviderTiles("OpenWeatherMap.Pressure", options = providerTileOptions(opacity = 0.35))
m <- leaflet()
map <- leaflet()
m %>% addProviderTiles("CartoDB.Positron") %>%
addProviderTiles("OpenWeatherMap.Pressure",
options = providerTileOptions(opacity = 0.35)
)
map <- leaflet()
m %>% addProviderTiles("CartoDB.Positron") %>%
addProviderTiles("OpenWeatherMap.Rain",
options = providerTileOptions(opacity = 0.35)
)
map <- leaflet()
m %>% addProviderTiles("CartoDB.Positron") %>%
addProviderTiles("OpenWeatherMap.RainClassic",
options = providerTileOptions(opacity = 0.35)
)
map <- leaflet()
m %>% addProviderTiles("CartoDB.Positron") %>%
addProviderTiles("OpenWeatherMap.Wind",
options = providerTileOptions(opacity = 0.35)
)
addProviderTiles("OpenWeatherMap.PressureCountour",
map <- leaflet()
m %>% addProviderTiles("CartoDB.Positron") %>%
addProviderTiles("OpenWeatherMap.PressureCountour",
options = providerTileOptions(opacity = 0.35)
)
map <- leaflet()
m %>% addProviderTiles("CartoDB.Positron") %>%
addProviderTiles("OpenWeatherMap.PressureCountour",
options = providerTileOptions(opacity = 0.35)
)
map <- leaflet()
map %>% addProviderTiles("CartoDB.DarkMatter") %>%
addProviderTiles("OpenWeatherMap.PressureCountour",
options = providerTileOptions(opacity = 0.35)
)
map <- leaflet()
map %>% addProviderTiles("CartoDB.DarkMatter") %>%
addProviderTiles("OpenWeatherMap.Pressure",
options = providerTileOptions(opacity = 0.35)
)
library(rleaflet)
install.packages("rleaflet")
library(leaflet)
map <- leaflet()
map <- leaflet()
map %>% addProviderTiles("CartoDB.Positron") %>%
addProviderTiles("OpenWeatherMap.Pressure",
options = providerTileOptions(opacity = 0.35)
)
setwd("~/Desktop/week11")
# package to quickly read data into R
library(readr)
# package to draw charts
library(ggplot2)
# package to format axes on those charts as %, $ and so on
library(scales)
# package for manipulating data
library(dplyr)
# package to import data from World Bank World Development Indicators API
library(WDI)
food_stamps <- read_csv("food_stamps.csv")
food_stamps <- read_csv("food_stamps.csv")
setwd("~/Desktop/week11")
setwd("~/Dropbox/ucb/week11")
setwd("~/Dropbox/ucb/raw_data/week11")
setwd("~/Dropbox/ucb/raw-data/week11")
setwd("~/Dropbox/ucb/raw-data/r-week11")
setwd("~/Dropbox/ucb/2015/dataviz/raw-data/r-week11")
food_stamps <- read_csv("food_stamps.csv")
ggplot(food_stamps, aes(x=year, y=participants)) + geom_line()
food_stamps_chart <- ggplot(food_stamps, aes(x=year, y=participants))
food_stamps_chart %>%
+ geom_line(size=1.5) %>%
+ geom_point(size=4) %>%
+ xlab("Year") %>%
+ ylab("Participants (millions)")
View(food_stamps)
tapply (food_stamps, participants(food_stamps, 5), median))
tapply (food_stamps, participants(food_stamps, 5), median)))
save.image("week11.RData")
tapply(food_stamps, participants(food_stamps, 5), median)))
tapply(food_stamps, participants(food_stamps, 5), median))
tapply(food_stamps, participants(food_stamps, 5), median)
tapply(food_stamps, cut(food_stamps, 5), median)
tapply(food_stamps, cut(participants, 5), median)
save.image("week11.RData")
tapply(food_stamps, cut(participants, 5), median)
food_stamps$participants <- 5
View(food_stamps)
food_stamps <- read_csv("food_stamps.csv")
food_stamps$participants <- 1:5
food_stamps <- 1:5
food_stamps <- read_csv("food_stamps.csv")
Food_stamps %>% mutate(bin=cut(participants, c(20,40,60)))
food_stamps %>% mutate(bin=cut(participants, c(20,40,60)))
x = c(20,40,60)
food_stamps %>% mutate(bin=bincode(participants, x)))
food_stamps %>% mutate(bin=bincode(participants, x))
food_stamps %>% mutate(bin=.bincode(participants, x))
food_stamps <- read_csv("food_stamps.csv")
food_stamps <- food_stamps %>% mutate(bin=.bincode(participants, x))
View(food_stamps)
x = c(2,4,6)
food_stamps <- read_csv("food_stamps.csv")
food_stamps <- food_stamps %>% mutate(bin=.bincode(participants, x))
View(food_stamps)
x = c(0,20,40,60,80)
food_stamps <- food_stamps %>% mutate(bin=.bincode(participants, x))
View(food_stamps)
x = c(0,20,40)
food_stamps <- food_stamps %>% mutate(bin=.bincode(participants, x))
View(food_stamps)
x = c(0,20,40,60)
food_stamps <- food_stamps %>% mutate(bin=.bincode(participants, x))
View(food_stamps)
