lon = numeric(0),
altitude = integer(0),
heading = integer(0),
speed = numeric(0),
mtime = as.POSIXct(character(0)),
type = character(0),
route = character(0),
squawk = integer(0),
vertrate = integer(0),
date = as.Date(character(0)),
hour = character(0))
for (file in file_list) {
temp_dataset <- read_csv(file, col_types = list(mtime=col_datetime())) %>%
# add date and hour variables
# filter data to remove erroneous/irrelevant records
mutate(date=as.Date(mtime),
hour=format(mtime, "%H")) %>%
filter(heading <=360,
route == "",
lat < 90 & lat > -90 & lat != 0,
lon < 180 & lat > -180 & lat != 0,
altitude > 0 & altitude < 15000,
speed < 700,
date >= "2015-08-01")
# summarize to give median latitude and longitude for each plane
map_planes <- test %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
# convert to a spatial data frame
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# spatial clip for planes flying over the US
us_planes <- map_planes[us, ]
# over US urban areas
# urban_planes <- map_planes[us_urban, ]
# over Census Bureau metro/micro statistical areas
# cbsa_planes <- map_planes[cbsa, ]
# convert clipped data back to regular data frames and select adshex
us_planes <- as.data.frame(us_planes) %>%
select(adshex)
#     cbsa_planes <- as.data.frame(cbsa_planes) %>%
#       select(adshex)
#     urban_planes <- as.data.frame(urban_planes) %>%
#       select(adshex)
# semi_join planes_data to map_planes filter for planes of potential interest
temp_dataset <- semi_join(temp_dataset, us_planes)
planes_data <- rbind(planes_data, temp_dataset)
rm(temp_dataset, map_planes, us_planes)
}
# load and process data from files in directory
file_list <- list.files()
# create empty data frame
planes_data <- data.frame(adshex = character(0),
reg = character(0),
flightno = character(0),
lat = numeric(0),
lon = numeric(0),
altitude = integer(0),
heading = integer(0),
speed = numeric(0),
mtime = as.POSIXct(character(0)),
type = character(0),
route = character(0),
squawk = integer(0),
vertrate = integer(0),
date = as.Date(character(0)),
hour = character(0))
for (file in file_list) {
temp_dataset <- read_csv(file, col_types = list(mtime=col_datetime())) %>%
# add date and hour variables
# filter data to remove erroneous/irrelevant records
mutate(date=as.Date(mtime),
hour=format(mtime, "%H")) %>%
filter(heading <=360,
route == "",
lat < 90 & lat > -90 & lat != 0,
lon < 180 & lat > -180 & lat != 0,
altitude > 0 & altitude < 15000,
speed < 700,
date >= "2015-08-01")
# summarize to give median latitude and longitude for each plane
map_planes <- temp_dataset %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
# convert to a spatial data frame
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# spatial clip for planes flying over the US
us_planes <- map_planes[us, ]
# over US urban areas
# urban_planes <- map_planes[us_urban, ]
# over Census Bureau metro/micro statistical areas
# cbsa_planes <- map_planes[cbsa, ]
# convert clipped data back to regular data frames and select adshex
us_planes <- as.data.frame(us_planes) %>%
select(adshex)
#     cbsa_planes <- as.data.frame(cbsa_planes) %>%
#       select(adshex)
#     urban_planes <- as.data.frame(urban_planes) %>%
#       select(adshex)
# semi_join planes_data to map_planes filter for planes of potential interest
temp_dataset <- semi_join(temp_dataset, us_planes)
planes_data <- rbind(planes_data, temp_dataset)
rm(temp_dataset, map_planes, us_planes)
}
View(planes_data)
# load and process data from files in directory
file_list <- list.files()
# create empty data frame
planes_data <- data.frame(adshex = character(0),
reg = character(0),
flightno = character(0),
lat = numeric(0),
lon = numeric(0),
altitude = integer(0),
heading = integer(0),
speed = numeric(0),
mtime = as.POSIXct(character(0)),
type = character(0),
route = character(0),
squawk = integer(0),
vertrate = integer(0),
date = as.Date(character(0)),
hour = character(0))
for (file in file_list) {
temp_dataset <- read_csv(file, col_types = list(mtime=col_datetime())) %>%
# add date and hour variables
# filter data to remove erroneous/irrelevant records
mutate(date=as.Date(mtime),
hour=format(mtime, "%H")) %>%
filter(heading <=360,
route == "",
lat < 90 & lat > -90 & lat != 0,
lon < 180 & lat > -180 & lat != 0,
altitude > 0 & altitude < 15000,
speed < 700,
date >= "2015-08-01")
# summarize to give median latitude and longitude for each plane
map_planes <- temp_dataset %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
# convert to a spatial data frame
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# spatial clip for planes flying over the US
us_planes <- map_planes[us, ]
# over US urban areas
# urban_planes <- map_planes[us_urban, ]
# over Census Bureau metro/micro statistical areas
# cbsa_planes <- map_planes[cbsa, ]
# convert clipped data back to regular data frames and select adshex
us_planes <- as.data.frame(us_planes) %>%
select(adshex)
#     cbsa_planes <- as.data.frame(cbsa_planes) %>%
#       select(adshex)
#     urban_planes <- as.data.frame(urban_planes) %>%
#       select(adshex)
# semi_join planes_data to map_planes filter for planes of potential interest
temp_dataset <- semi_join(temp_dataset, us_planes)
planes_data <- rbind(planes_data, temp_dataset)
rm(temp_dataset, map_planes, us_planes)
}
# load and process data from files in directory
file_list <- list.files()
# create empty data frame
planes_data <- data.frame(adshex = character(0),
reg = character(0),
flightno = character(0),
lat = numeric(0),
lon = numeric(0),
altitude = integer(0),
heading = integer(0),
speed = numeric(0),
mtime = as.POSIXct(character(0)),
type = character(0),
route = character(0),
squawk = integer(0),
vertrate = integer(0),
date = as.Date(character(0)),
hour = character(0))
for (file in file_list) {
temp_dataset <- read_csv(file, col_types = list(mtime=col_datetime())) %>%
# add date and hour variables
# filter data to remove erroneous/irrelevant records
mutate(date=as.Date(mtime),
hour=format(mtime, "%H")) %>%
filter(heading <=360,
route == "",
lat < 90 & lat > -90 & lat != 0,
lon < 180 & lat > -180 & lat != 0,
altitude > 0 & altitude < 15000,
speed < 700,
date >= "2015-08-01")
# summarize to give median latitude and longitude for each plane
map_planes <- temp_dataset %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
# convert to a spatial data frame
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# spatial clip for planes flying over the US
us_planes <- map_planes[us, ]
# over US urban areas
# urban_planes <- map_planes[us_urban, ]
# over Census Bureau metro/micro statistical areas
# cbsa_planes <- map_planes[cbsa, ]
# convert clipped data back to regular data frames and select adshex
us_planes <- as.data.frame(us_planes) %>%
select(adshex)
#     cbsa_planes <- as.data.frame(cbsa_planes) %>%
#       select(adshex)
#     urban_planes <- as.data.frame(urban_planes) %>%
#       select(adshex)
# semi_join planes_data to map_planes filter for planes of potential interest
temp_dataset <- semi_join(temp_dataset, us_planes)
planes_data <- rbind(planes_data, temp_dataset)
rm(temp_dataset, map_planes, us_planes)
}
# load and process data from files in directory
file_list <- list.files()
# create empty data frame
planes_data <- data.frame(adshex = character(0),
reg = character(0),
flightno = character(0),
lat = numeric(0),
lon = numeric(0),
altitude = integer(0),
heading = integer(0),
speed = numeric(0),
mtime = as.POSIXct(character(0)),
type = character(0),
route = character(0),
squawk = integer(0),
vertrate = integer(0),
date = as.Date(character(0)),
hour = character(0))
for (file in file_list) {
temp_dataset <- read_csv(file, col_types = list(mtime=col_datetime())) %>%
# add date and hour variables
# filter data to remove erroneous/irrelevant records
mutate(date=as.Date(mtime),
hour=format(mtime, "%H")) %>%
filter(heading <=360,
route == "",
lat < 90 & lat > -90 & lat != 0,
lon < 180 & lat > -180 & lat != 0,
altitude > 0 & altitude < 15000,
speed < 700,
date >= "2015-08-01")
# summarize to give median latitude and longitude for each plane
map_planes <- temp_dataset %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
# convert to a spatial data frame
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# spatial clip for planes flying over the US
us_planes <- map_planes[us, ]
# over US urban areas
# urban_planes <- map_planes[us_urban, ]
# over Census Bureau metro/micro statistical areas
# cbsa_planes <- map_planes[cbsa, ]
# convert clipped data back to regular data frames and select adshex
us_planes <- as.data.frame(us_planes) %>%
select(adshex)
#     cbsa_planes <- as.data.frame(cbsa_planes) %>%
#       select(adshex)
#     urban_planes <- as.data.frame(urban_planes) %>%
#       select(adshex)
# semi_join planes_data to map_planes filter for planes of potential interest
temp_dataset <- semi_join(temp_dataset, us_planes)
planes_data <- rbind(planes_data, temp_dataset)
rm(temp_dataset, map_planes, us_planes)
}
tail(planes_data)
setwd("/Volumes/External hard drive for MacBook/planefinder/working")
dea <- read_csv("dea.csv")
dhs <- read_csv("dhs.csv")
fbi <- read_csv("fbi.csv")
View(dhs)
View(fbi)
map_planes <- planes_data %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
View(map_planes)
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# over US urban areas
urban_planes <- map_planes[us_urban, ]
# over Census Bureau metro/micro statistical areas
cbsa_planes <- map_planes[cbsa, ]
# convert clipped data back to regular data frames and select adshex
us_planes <- as.data.frame(us_planes) %>%
select(adshex)
cbsa_planes <- as.data.frame(cbsa_planes) %>%
select(adshex)
urban_planes <- as.data.frame(urban_planes) %>%
select(adshex)
us_planes <- as.data.frame(map_planes) %>%
select(adshex)
cbsa_planes <- as.data.frame(cbsa_planes) %>%
select(adshex)
urban_planes <- as.data.frame(urban_planes) %>%
select(adshex)
dea_us_hits <- semi_join(us_planes, dea)
View(dea_us_hits)
fbi_us_hits <- semi_join(us_planes, fbi)
dea_us_hits <- semi_join(us_planes, dea)
fbi_us_hits <- semi_join(us_planes, fbi)
dhs_us_hits <- semi_join(us_planes, dhs
)
dea_us_hits <- semi_join(dea, us_planes)
fbi_us_hits <- semi_join(us_planes, fbi)
dhs_us_hits <- semi_join(dhs, us_planes)
View(dhs)
temp <- read_csv("2015-08-19H12.CSV", col_types = list(mtime=col_datetime()))
# add date and hour variables
# filter data to remove erroneous/irrelevant records
test <- temp %>%
mutate(date=as.Date(mtime),
hour=format(mtime, "%H")) %>%
filter(heading <=360,
route == "",
lat < 90 & lat > -90 & lat != 0,
lon < 180 & lat > -180 & lat != 0,
altitude > 0 & altitude < 15000,
speed < 700,
date >= "2015-08-01")
# summarize to give median latitude and longitude for each plane
map_planes <- test %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
# convert to a spatial data frame
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# spatial clip for planes flying over the US
us_planes <- map_planes[us, ]
us_planes <- as.data.frame(us_planes) %>%
select(adshex)
fbi_us_hits <- semi_join(us_planes, fbi)
dea_us_hits <- semi_join(dea, us_planes)
dhs_us_hits <- semi_join(dhs, us_planes)
temp <- read_csv("2015-08-19H12.CSV", col_types = list(mtime=col_datetime()))
test <- temp %>%
mutate(date=as.Date(mtime),
hour=format(mtime, "%H")) %>%
filter(heading <=360,
route == "",
lat < 90 & lat > -90 & lat != 0,
lon < 180 & lat > -180 & lat != 0,
altitude > 0 & altitude < 15000,
speed < 700,
date >= "2015-08-01")
map_planes <- test %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
# convert to a spatial data frame
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
map_planes <- as.data.frame(map_planes) %>%
select(adshex)
fbi_us_hits <- semi_join(map_planes, fbi)
temp <- read_csv("2015-08-19H12.CSV", col_types = list(mtime=col_datetime()))
map_planes <- temp %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
fbi_us_hits <- semi_join(map_planes, fbi)
View(map_planes)
View(dhs_us_hits)
dhs_us_hits <- semi_join(dhs, map_planes)
map_planes <- planes_data %>%
group_by(adshex) %>%
summarize(lat=median(lat, na.rm=TRUE), long=median(lon, na.rm=TRUE))
map_planes <- planes_data %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
map_planes <- temp %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
map_planes <- temp %>%
group_by(adshex) %>%
summarize(lat=median(lat, na.rm=TRUE), long=median(lon, na.rm=TRUE))
map_planes <- temp %>%
group_by(adshex) %>%
summarize(n())
View(map_planes)
map_planes <- planes_data %>%
group_by(adshex) %>%
summarize(lat=median(lat), long=median(lon))
map_planes <- as.data.frame(map_planes)
xy <- map_planes[,c(3,2)]
map_planes <- SpatialPointsDataFrame(coords = xy, data = map_planes, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
us_planes <- as.data.frame(map_planes) %>%
select(adshex)
dea_us_hits <- semi_join(dea, us_planes)
fbi_us_hits <- semi_join(us_planes, fbi)
dhs_us_hits <- semi_join(dhs, us_planes)
# spatial clip for planes with median position over US urban areas
urban_planes <- map_planes[us_urban, ]
# and over Census Bureau metro/micro statistical areas
cbsa_planes <- map_planes[cbsa, ]
dea_us_hits <- semi_join(dea, us_planes)
fbi_us_hits <- semi_join(fbi, us_planes)
dhs_us_hits <- semi_join(dhs, us_planes)
dea_urban_hits <- semi_join(dea, urban_planes)
fbi_urban_hits <- semi_join(fbi, urban_planes)
dhs_urban_hits <- semi_join(dhs, urban_planes)
dea_cbsa_hits <- semi_join(dea, cbsa_planes)
fbi_cbsa_hits <- semi_join(fbi, cbsa_planes)
dhs_cbsa_hits <- semi_join(dhs, cbsa_planes)
load("/Volumes/External hard drive for MacBook/planefinder/working/clip_geodata.RData")
save.image("/Volumes/External hard drive for MacBook/planefinder/working/working_planes.RData")
all_planes <- data.frame(adshex = character(0),
count = interger(0))
all_planes <- data.frame(adshex = character(0),
count = integer(0))
View(all_planes)
dea_us_hits <- semi_join(dea, us_planes)
fbi_us_hits <- semi_join(fbi, us_planes)
dhs_us_hits <- semi_join(dhs, us_planes)
cbsa_planes <- as.data.frame(cbsa_planes) %>%
select(adshex)
urban_planes <- as.data.frame(urban_planes) %>%
select(adshex)
dea_urban_hits <- semi_join(dea, urban_planes)
fbi_urban_hits <- semi_join(fbi, urban_planes)
dhs_urban_hits <- semi_join(dhs, urban_planes)
dea_cbsa_hits <- semi_join(dea, cbsa_planes)
fbi_cbsa_hits <- semi_join(fbi, cbsa_planes)
dhs_cbsa_hits <- semi_join(dhs, cbsa_planes)
View(planes_data)
View(fed_summary)
fbi_A1B021_map
View(planes_sample_summary)
library(dplyr)
library(readr)
library(leaflet)
library(rgdal)
library(htmlwidgets)
View(feds_planes)
library(ggplot2)
ggplot(feds_planes, aes(x=mtime, y=altitude)) + geom_line() + facet_wrap(~adshex)
ggplot(feds_planes, aes(x=mtime, y=altitude)) + geom_path() + facet_wrap(~adshex)
ggplot(feds_planes, aes(x=mtime, y=altitude)) + geom_path() + facet_wrap(~adshex,~date)
ggplot(feds_planes, aes(x=mtime, y=altitude)) + geom_path() + facet_wrap(~date)
grouped_feds <- feds_planes %>%
group_by(date)
ggplot(grouped_feds, aes(x=mtime, y=altitude)) + geom_path() + facet_wrap(~adshex)
ggplot(grouped_feds, aes(x=mtime, y=altitude)) + geom_point() + facet_wrap(~adshex)
library(rgdal)
library(dplyr)
setwd("~/Dropbox/ucb/2015/dataviz/raw-data/ca_healthcare")
hospitals_grid <- readOGR("hospitals_grid.GeoJSON", layer = "OGRGeoJSON")
str(hospitals_grid)
hospitals_grid <- readOGR("hospitals_grid.GeoJSON", layer = "OGRGeoJSON") %>%
filter(!is.null(PNTCNT))
hospitals_grid <- readOGR("hospitals_grid.GeoJSON", layer = "OGRGeoJSON") %>%
subset(!is.null(PNTCNT))
hospitals_grid <- readOGR("hospitals_grid.GeoJSON", layer = "OGRGeoJSON")
hospitals_grid <- readOGR("hospitals_grid.GeoJSON", layer = "OGRGeoJSON") %>%
subset(PNTCNT !is.null)
hosptials_grid2 <- subset(hospitals_grid, !is.null(PNTCNT))
writeOGR(hospitals_grid2, 'hospitals_grid2.geojson', 'hospitals_grid2', driver='GeoJSON')
hospitals_grid2 <- subset(hospitals_grid, !is.null(PNTCNT))
writeOGR(hospitals_grid2, 'hospitals_grid2.geojson', 'hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, 'hospitals_grid2.GeoJSON', 'hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, 'hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, layer='hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, "hospitals_grid.GeoJSON", layer='hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, "hospitals_grid2.GeoJSON", layer='hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, layer='hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, file="hospitals_grid2.GeoJSON" layer='hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, file="hospitals_grid2.GeoJSON", layer='hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, dsn="hospitals_grid2.GeoJSON", layer='hospitals_grid2', driver='GeoJSON')
setwd("~/Dropbox/ucb/2015/dataviz/raw-data/ca_healthcare")
writeOGR(hospitals_grid2, dsn="hospitals_grid2.GeoJSON", layer='hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, dsn="~/Dropbox/ucb/2015/dataviz/raw-data/ca_healthcare/hospitals_grid2.GeoJSON", layer='hospitals_grid2', driver='GeoJSON')
writeOGR(hospitals_grid2, "hospitals_grid2.geojson", "hospitals_grid2", driver = "GeoJSON")
writeOGR(hospitals_grid2, "hospitals_grid2.GeoJSON", "hospitals_grid2", driver = "GeoJSON")
library(rgdal)
writeOGR(hospitals_grid2, "hospitals_grid2.GeoJSON", "hospitals_grid2", driver = "GeoJSON")
writeOGR(hospitals_grid2, ".", "hospitals_grid2", driver="ESRI Shapefile")
hospitals_grid2 <- hospitals_grid[hospitals_grid$PNTCNT !is.null,]
hospitals_grid2 <- hospitals_grid[hospitals_grid$PNTCNT >0,]
hospitals_grid2 <- hospitals_grid[hospitals_grid$PNTCNT !is.na,]
hospitals_grid2 <- hospitals_grid[hospitals_grid$PNTCNT ! is.na,]
hospitals_grid2 <- hospitals_grid[hospitals_grid$PNTCNT ! is.null,]
hospitals_grid2 <- hospitals_grid[(!is.null(hospitals_grid$PNTCNT),]
hospitals_grid2 <- hospitals_grid[(!is.null(hospitals_grid$PNTCNT)]
hospitals_grid2 <- hospitals_grid[(!is.null(hospitals_grid$PNTCNT),]
hospitals_grid2 <- subset(hospitals_grid, !(is.na(PNTCNT))
)
hospitals_grid <- readOGR("hospitals_grid.GeoJSON", layer = "OGRGeoJSON")
hospitals_grid <- subset(hospitals_grid, !(is.na(PNTCNT))
)
writeOGR(hospitals_grid, "hospitals_grid.GeoJSON", "hospitals_grid", driver = "GeoJSON")
writeOGR(hospitals_grid2, ".", "hospitals_grid2", driver="ESRI Shapefile")
writeOGR(hospitals_grid, ".", "hospitals_grid", driver="ESRI Shapefile")
hospitals_grid$PNTCNT <- as.integer(hospitals_grid$PNTCNT)
hospitals_grid$PNTCNT <- as.integer(hospitals_grid$PNTCNT)
hospitals_grid$CAPACITY_s <- as.integer(hospitals_grid$CAPACITY_s)
hospitals_grid <- subset(hospitals_grid, !(is.na(PNTCNT)))
writeOGR(hospitals_grid, ".", "hospitals_grid", driver="ESRI Shapefile")
writeOGR(hospitals_grid, ".", "hospitals_grid", driver="ESRI Shapefile")
