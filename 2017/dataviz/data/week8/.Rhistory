oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character())
oakland <- bind_rows(oakland,tmp)
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character())))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character()))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = (
CHPTYPE = col_character())
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = (
CHPTYPE = col_character()))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = CHPTYPE = "c")
oakland <- bind_rows(oakland,tmp)
}
paste0("oakland/",file)
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = (CHPTYPE = "c"))
oakland <- bind_rows(oakland,tmp)
}
tmp <- read.csv(paste0("oakland/",file), col_types = (CHPTYPE = "c"))
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = (
CHPTYPE = "c"
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read.csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = "c"
))
oakland <- bind_rows(oakland,tmp)
}
library(readr)
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = "c"
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = "c",
LOCATION = "c"
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_date()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_factor()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_character(),
DATE = col_character()
))
oakland <- bind_rows(oakland,tmp)
}
for (file in files) {
tmp <- read_csv(paste0("oakland/",file), col_types = cols(
CHPTYPE = col_character(),
LOCATION = col_integer(),
PROCDATE = col_character(),
DATE = col_date()
))
oakland <- bind_rows(oakland,tmp)
}
2536+2403+2298+2246+1959+2014+2075+2213+2124
setwd("/Volumes/Working/adsb")
# load required packages
library(dplyr)
library(readr)
# Set default timezone for session to UTC
Sys.setenv(TZ = "UTC")
files <- list.files("archive/good")
good_errors <- c()
for (file in files) {
print(file)
good_planes <- read_csv(paste0("archive/good/",file)) %>%
filter(!is.na(acList.Lat)) %>%
select(17,29,8,26,39,27,33,20,21,1,35,19,24)
names(good_planes) <- c("adshex","reg","country","operator","type","postime","squawk","latitude","longitude","altitude","track","interesting","military")
good_planes <- good_planes %>%
filter(country=="United States" | country=="Canada")
unique_planes <- unique(good_planes$adshex)
n=1
for (plane in unique_planes) {
tmp <- good_planes %>%
filter(adshex==plane) %>%
unique() %>%
mutate(timestamp=as.POSIXct(postime/1000, origin="1970-01-01"))
tmp$reg <- gsub("/","-",tmp$reg)
possibleError <- tryCatch({
write_csv(tmp, paste0("indiv_planes_new/",plane,"_",tmp$reg[1],"_",tmp$operator[1],"_",tmp$country[1],".csv"), na="", append = TRUE)
print(paste0(file," ",plane," ",n," of ",length(unique_planes)))
n=n+1
}, warning = function(w) {
}, error = function(e) {
good_errors[[length(good_errors)+1]] <- plane
})
}
}
View(good_planes)
View(tmp)
good_planes <- read_csv("archive/done_good/2016-07-21H00.csv")
good_planes <- read_csv("archive/good/2016-07-21H00.csv")
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv")
problems()
problems(good_planes)
View(problems(good_planes))
good_planes <- read_csv("archive/good/2016-07-21H12.csv")
good_planes <- read_csv("archive/good_done/2016-07-21H12.csv")
View(problems(good_planes))
good_planes <- read_csv("archive/good/2016-07-21H00.csv", col_types = col(
acList.year=col_character()
))
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv", col_types = col(
acList.year=col_character()
))
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv", col_types = col(
acList.year=col_character()
)
)
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv", col_types = cols(
acList.year=col_character()
))
good_planes <- read_csv("archive/good_done/2016-07-21H00.csv", col_types = cols(
acList.Year=col_character()
))
str(good_planes)
library(dplyr)
library(readr)
# Set default timezone for session to UTC
Sys.setenv(TZ = "UTC")
# from good
files <- list.files("archive/good")
good_errors <- c()
for (file in files) {
print(file)
good_planes <- read_csv(paste0("archive/good/",file), col_types = cols(
acList.Year=col_character()
)) %>%
filter(!is.na(acList.Lat)) %>%
select(17,29,8,26,39,27,33,20,21,1,35,19,24)
names(good_planes) <- c("adshex","reg","country","operator","type","postime","squawk","latitude","longitude","altitude","track","interesting","military")
good_planes <- good_planes %>%
filter(country=="United States" | country=="Canada")
unique_planes <- unique(good_planes$adshex)
n=1
for (plane in unique_planes) {
tmp <- good_planes %>%
filter(adshex==plane) %>%
unique() %>%
mutate(timestamp=as.POSIXct(postime/1000, origin="1970-01-01"))
tmp$reg <- gsub("/","-",tmp$reg)
possibleError <- tryCatch({
write_csv(tmp, paste0("indiv_planes_new/",plane,"_",tmp$reg[1],"_",tmp$operator[1],"_",tmp$country[1],".csv"), na="", append = TRUE)
print(paste0(file," ",plane," ",n," of ",length(unique_planes)))
n=n+1
}, warning = function(w) {
}, error = function(e) {
good_errors[[length(good_errors)+1]] <- plane
})
}
}
library(babynames)
library(dplyr)
library(ggplot2)
View(babynames)
names <- babynames %>%
filter(name=="Peter" | name=="Alexandra")
View(names)
names <- babynames %>%
filter(name=="Peter" | name=="Alexandra" | name=="Allie")
View(names)
ggplot(names, aes(x=year, y=prop, color=name)) +
geom_path()
ggplot(names, aes(x=year, y=prop, color=name)) +
geom_line()
ggplot(names, aes(x=year, y=prop, color=name)) +
geom_point()
names <- babynames %>%
filter(name=="Peter" | name=="Alexandra")
ggplot(names, aes(x=year, y=prop, color=name)) +
geom_point()
names <- babynames %>%
filter((name=="Peter" & sex == "M" | (name=="Alexandra" & sex=="F")
ggplot(names, aes(x=year, y=prop, color=name)) +
geom_line()
names <- babynames %>%
filter((name=="Peter" & sex == "M" | (name=="Alexandra" & sex=="F")
)
)
names <- babynames %>%
filter((name=="Peter" & sex == "M" | (name=="Alexandra" & sex=="F"))
names <- babynames %>%
filter((name=="Peter" & sex == "M") | (name=="Alexandra" & sex=="F"))
names <- babynames %>%
filter((name=="Peter" & sex == "M") | (name=="Alexandra" & sex=="F"))
ggplot(names, aes(x=year, y=prop, color=name)) +
geom_line()
ggplot(names, aes(x=year, y=prop, color=name)) +
geom_line() +
theme_minimal() +
xlab("") +
ylab("Proportion of births")
library(WDI)
library(dplyr)
library(readr)
library(stringr)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "SP.DYN.CBRT.IN","SH.DYN.NMRT")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2014, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates") %>%
select(1,9,2:8,10,14)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
# write to csv
write_csv(indicators, "nations.csv", na="")
setwd("~/Desktop/week8")
# load required packages
library(ggplot2)
library(readr)
# load disease and democracy data
disease_democ <- read_csv("disease_democ.csv")
View(disease_democ)
# map values in data to X and Y axes
ggplot(disease_democ, aes(x = infect_rate, y = democ_score))
ggplot(disease_democ, aes(x = infect_rate, y = democ_score)) +
xlab("Infectious disease prevalence score") +
ylab("Democratization score")
ggplot(disease_democ, aes(x = infect_rate, y = democ_score)) +
xlab("Infectious disease prevalence score") +
ylab("Democratization score") +
theme_minimal(base_size = 14, base_family = "Georgia")
names(postscriptFonts()))
names(postscriptFonts())
disease_democ_chart <- ggplot(disease_democ, aes(x = infect_rate, y = democ_score)) +
xlab("Infectious disease prevalence score") +
ylab("Democratization score") +
theme_minimal(base_size = 14, base_family = "Georgia")
plot(disease_democ_chart)
disease_democ_chart +
geom_point()
disease_democ_chart +
geom_point() +
geom_smooth()
# customize the two geom layers
disease_democ_chart +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = lm, se=FALSE, color = "red")
disease_democ_chart +
geom_point(size = 3, alpha = 0.5, aes(color = income_group)) +
geom_smooth(method = lm, se  =FALSE, color = "black", linetype = "dotdash", size = 0.3)
# color the entire chart by income group
ggplot(disease_democ, aes(x = infect_rate, y = democ_score, color=income_group)) +
xlab("Infectious disease prevalence score") +
ylab("Democratization score") +
theme_minimal(base_size = 14, base_family = "Georgia") +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method=lm, se=FALSE, linetype= "dotdash", size = 0.3)
disease_democ_chart +
geom_point(size = 3, alpha = 0.5, aes(color = income_group)) +
geom_smooth(method = lm, se = FALSE, color = "black", linetype = "dotdash", size = 0.3) +
scale_x_continuous(limits=c(0,70)) +
scale_y_continuous(limits=c(0,100)) +
scale_color_brewer(name="Income group", palette = "Set1")
final_disease_democ_chart <- disease_democ_chart +
geom_point(size = 3, alpha = 0.5, aes(color = income_group)) +
geom_smooth(method = lm, se = FALSE, color = "black", linetype = "dotdash", size = 0.3) +
scale_x_continuous(limits=c(0,70)) +
scale_y_continuous(limits=c(0,100)) +
scale_color_brewer(name="Income group", palette = "Set1")
save.image("~/Desktop/week8/week8.RData")
food_stamps <- read_csv("food_stamps.csv")
# save basic chart template
food_stamps_chart <- ggplot(food_stamps, aes(x = year, y = participants)) +
xlab("Year") +
ylab("Participants (millions)") +
theme_minimal(base_size = 14, base_family = "Georgia")
View(food_stamps)
food_stamps_chart
food_stamps_chart
plot(food_stamps_chart)
# line chart
food_stamps_chart +
geom_line()
food_stamps_chart +
geom_line(size = 1.5, color = "red") +
ggtitle("Line chart")
# Add a second layer to make a dot-and-line chart
food_stamps_chart +
geom_line() +
geom_point() +
ggtitle("Dot-and-line chart")
food_stamps_chart +
geom_line(color="red") +
geom_point() +
ggtitle("Dot-and-line chart")
# Make a column chart
food_stamps_chart +
geom_bar(stat = "identity") +
ggtitle("Column chart") +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
food_stamps_chart +
geom_bar(stat = "identity") +
ggtitle("Column chart") +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
geom_line(color="red")
food_stamps_chart +
geom_bar(stat = "identity") +
ggtitle("Column chart") +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
coord_flip()
# set color and fill
food_stamps_chart +
geom_bar(stat = "identity", color = "#888888", fill = "#CCCCCC", alpha = 0.5) +
ggtitle("Column chart")
food_stamps_chart +
geom_bar(stat = "identity", color= "white", aes(fill = costs))
# use a colorbrewer sequential palette
food_stamps_chart +
geom_bar(stat = "identity", color = "#888888", aes(fill = costs)) +
scale_fill_distiller(name = "Cost\n($ billion)", palette = "Reds", direction = 1)
food_stamps_chart +
geom_bar(stat="identity", color = "#888888", aes(fill=costs)) +
scale_fill_distiller(name = "Cost\n($ billion)", palette = "Reds", direction = 1) +
theme(legend.position=c(0.15,0.8))
library(scales)
# load data
immun <- read_csv("kindergarten.csv")
View(immun)
library(dplyr)
immun_year <- immun %>%
group_by(start_year) %>%
summarize(enrolled = sum(enrollment, na.rm=TRUE),completed = sum(complete, na.rm=TRUE)) %>%
mutate(incomplete = round(((enrolled-completed)/enrolled),4))
immun_year <- immun %>%
group_by(start_year) %>%
summarize(enrolled = sum(enrollment, na.rm=TRUE),completed = sum(complete, na.rm=TRUE)) %>%
mutate(incomplete = round(((enrolled-completed)/enrolled),4))
View(immun_year)
immun_counties_year <- immun %>%
group_by(county,start_year) %>%
summarize(enrolled = sum(enrollment, na.rm = TRUE),completed = sum(complete, na.rm = TRUE)) %>%
mutate(incomplete = round(((enrolled-completed)/enrolled),4))
View(immun_counties_year)
# proportion incomplete, entire state, by year
immun_year <- immun %>%
group_by(start_year) %>%
summarize(enrolled = sum(enrollment, na.rm=TRUE),completed = sum(complete, na.rm=TRUE)) %>%
mutate(incomplete = round(((enrolled-completed)/enrolled),4))
# proportion incomplete, by county, by year
immun_counties_year <- immun %>%
group_by(county,start_year) %>%
summarize(enrolled = sum(enrollment, na.rm = TRUE),completed = sum(complete, na.rm = TRUE)) %>%
mutate(incomplete = round(((enrolled-completed)/enrolled),4))
# proportion incomplete, entire state, by year
immun_year <- immun %>%
group_by(start_year) %>%
summarize(enrolled = sum(enrollment, na.rm=TRUE),completed = sum(complete, na.rm=TRUE)) %>%
mutate(incomplete = round(((enrolled-completed)/enrolled),4))
# proportion incomplete, by county, by year
immun_counties_year <- immun %>%
group_by(county,start_year) %>%
summarize(enrolled = sum(enrollment, na.rm = TRUE),completed = sum(complete, na.rm = TRUE)) %>%
mutate(incomplete = round(((enrolled-completed)/enrolled),4))
# identify five counties with the largest enrollment over all years
top5 <- immun %>%
group_by(county) %>%
summarize(enrolled = sum(enrollment, na.rm = TRUE)) %>%
arrange(desc(enrolled)) %>%
head(5) %>%
select(county)
# proportion incomplete, top 5 counties by enrollment, by year
immun_top5_year <- semi_join(immun_counties_year, top5)
View(immun_year)
View(immun_top5_year)
View(immun_counties_year)
ggplot(immun_year, aes(x = start_year, y = incomplete)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.7) +
theme_minimal(base_size = 12) +
scale_y_continuous(labels = percent) +
scale_x_continuous(breaks = c(2002,2004,2006,2008,2010,2012,2014)) +
xlab("") +
ylab("Incomplete") +
ggtitle("Immunization in California kindergartens, entire state") +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ggplot(immun_top5_year, aes(x = start_year, y = incomplete, color = county)) +
scale_color_brewer(palette = "Set1", name = "") +
geom_line(size=1) +
geom_point(size=3) +
theme_minimal(base_size = 12) +
scale_y_continuous(labels = percent, limits = c(0,0.15)) +
scale_x_continuous(breaks = c(2002,2004,2006,2008,2010,2012,2014)) +
xlab("") +
ylab("Incomplete") +
theme(legend.position = "bottom") +
ggtitle("Immunization in California kindergartens\n(five largest counties)")
ggplot(immun_top5_year, aes(x = start_year, y = incomplete, color = county)) +
scale_color_brewer(palette = "Set1", name = "") +
geom_line(size=1) +
geom_point(size=3) +
theme_minimal(base_size = 12) +
scale_y_continuous(labels = percent, limits = c(0,0.15)) +
scale_x_continuous(breaks = c(2002,2004,2006,2008,2010,2012,2014)) +
xlab("") +
ylab("Incomplete") +
theme(legend.position = "top") +
ggtitle("Immunization in California kindergartens\n(five largest counties)")
ggplot(immun_counties_year, aes(x = start_year, y = county)) +
geom_tile(aes(fill = incomplete), colour = "white") +
scale_fill_gradient(low = "white",
high = "red",
name="",
labels = percent) +
scale_x_continuous(breaks = c(2002,2004,2006,2008,2010,2012,2014)) +
theme_minimal(base_size = 12) +
xlab("") +
ylab("County") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="bottom",
legend.key.height = unit(0.4, "cm")) +
ggtitle("Immunization in California kindergartens, by county")
nations <- read_csv("nations.csv")
# filter for 2014 data only
nations2014 <- nations %>%
filter(year == 2014)
View(nations)
View(nations)
setwd("~/Dropbox/ucb/2016/dataviz/data/week8")
nations <- read_csv("nations.csv")
View(nations)
# filter for 2014 data only
nations2014 <- nations %>%
filter(year == 2014)
ggplot(nations2014, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
